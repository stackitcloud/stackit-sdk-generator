// checks if the {{classname}} type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &{{classname}}{}

{{#vars}}

/*
	types and functions for {{baseName}} 
	{{!.}}
*/

{{! The basic approach is as follows: To avoid checking the various datatypes, }}
{{! exceptions and non-orthogonal model states we introduce go type-alias }}
{{! These are compatible with their basic types (this maintains backwards)}}
{{! compatibility with existing code). This allows to concentrate the  decision what }}
{{! actual type the openapi represents in a single place. Reusing the generated}}
{{! type in all other places avoids repetion of the non-trivial decision matrix}}
{{! which type is to be used.}}
{{! We define three basic types:}}
{{! - FooAttributeType: The type used for the model-struct definitions, i.e. the struct attribute type}}
{{! - FooArgType: The type used for parameter passing, i.e. in function calls}}
{{! - FooRetType: The type used for function returns.}}
{{! To simplify reading and writing values even further, type-safe}}
{{! helper methods for getting and setting valuesare generated as well}}
{{! (these are not rendered as methods, as the structs themselves may be nil)}}
{{! (a pure function avoids possible nil-pointer exceptions)}}


{{! address primitives types, excluding enums (they are handled explicitly below) }}
{{^isEnum}}
{{#isNumber}}
// isNumber
type {{classname}}{{getter}}AttributeType = *float64
type {{classname}}{{getter}}ArgType = {{#isNullable}}*{{/isNullable}}float64
type {{classname}}{{getter}}RetType = {{#isNullable}}*{{/isNullable}}float64
func get{{classname}}{{getter}}AttributeTypeOk(arg {{classname}}{{getter}}AttributeType) (ret {{classname}}{{getter}}RetType, ok bool) {
	if arg == nil {
		{{#isNullable}}
		return nil,false
		{{/isNullable}}
		{{^isNullable}}
		return ret,false
		{{/isNullable}}
	}
	return {{^isNullable}}*{{/isNullable}}arg,true
}

func set{{classname}}{{getter}}AttributeType(arg *{{classname}}{{getter}}AttributeType, val {{classname}}{{getter}}RetType) {
	*arg={{^isNullable}}&{{/isNullable}}val
}
{{/isNumber}}
{{#isFloat}}
// isFloat
type {{classname}}{{getter}}AttributeType = *float64
type {{classname}}{{getter}}ArgType = {{#isNullable}}*{{/isNullable}}float64
type {{classname}}{{getter}}RetType = {{#isNullable}}*{{/isNullable}}float64
func get{{classname}}{{getter}}AttributeTypeOk(arg {{classname}}{{getter}}AttributeType) (ret {{classname}}{{getter}}RetType, ok bool) {
	if arg == nil {
		{{#isNullable}}
		return nil,false
		{{/isNullable}}
		{{^isNullable}}
		return ret,false
		{{/isNullable}}
	}
	return {{^isNullable}}*{{/isNullable}}arg,true
}

func set{{classname}}{{getter}}AttributeType(arg *{{classname}}{{getter}}AttributeType, val {{classname}}{{getter}}RetType) {
	*arg={{^isNullable}}&{{/isNullable}}val
}
{{/isFloat}}
{{#isDouble}}
// isDouble
type {{classname}}{{getter}}AttributeType = *float64
type {{classname}}{{getter}}ArgType = {{#isNullable}}*{{/isNullable}}float64
type {{classname}}{{getter}}RetType = {{#isNullable}}*{{/isNullable}}float64
func get{{classname}}{{getter}}AttributeTypeOk(arg {{classname}}{{getter}}AttributeType) (ret {{classname}}{{getter}}RetType, ok bool) {
	if arg == nil {
		{{#isNullable}}
		return nil,false
		{{/isNullable}}
		{{^isNullable}}
		return ret,false
		{{/isNullable}}
	}
	return {{^isNullable}}*{{/isNullable}}arg,true
}

func set{{classname}}{{getter}}AttributeType(arg *{{classname}}{{getter}}AttributeType, val {{classname}}{{getter}}RetType) {
	*arg={{^isNullable}}&{{/isNullable}}val
}
{{/isDouble}}
{{#isShort}}
{{! isShort and isInteger may be true at the same time, so select one}}
{{^isInteger}}
// isShort
type {{classname}}{{getter}}AttributeType = *int64
type {{classname}}{{getter}}ArgType = {{#isNullable}}*{{/isNullable}}int64
type {{classname}}{{getter}}RetType = {{#isNullable}}*{{/isNullable}}int64
func get{{classname}}{{getter}}AttributeTypeOk(arg {{classname}}{{getter}}AttributeType) (ret {{classname}}{{getter}}RetType, ok bool) {
	if arg == nil {
		{{#isNullable}}
		return nil,false
		{{/isNullable}}
		{{^isNullable}}
		return ret,false
		{{/isNullable}}
	}
	return {{^isNullable}}*{{/isNullable}}arg,true
}

func set{{classname}}{{getter}}AttributeType(arg *{{classname}}{{getter}}AttributeType, val {{classname}}{{getter}}RetType) {
	*arg={{^isNullable}}&{{/isNullable}}val
}
{{/isInteger}}
{{/isShort}}
{{#isInteger}}
// isInteger
type {{classname}}{{getter}}AttributeType = *int64
type {{classname}}{{getter}}ArgType = {{#isNullable}}*{{/isNullable}}int64
type {{classname}}{{getter}}RetType = {{#isNullable}}*{{/isNullable}}int64
func get{{classname}}{{getter}}AttributeTypeOk(arg {{classname}}{{getter}}AttributeType) (ret {{classname}}{{getter}}RetType, ok bool) {
	if arg == nil {
		{{#isNullable}}
		return nil,false
		{{/isNullable}}
		{{^isNullable}}
		return ret,false
		{{/isNullable}}
	}
	return {{^isNullable}}*{{/isNullable}}arg,true
}

func set{{classname}}{{getter}}AttributeType(arg *{{classname}}{{getter}}AttributeType, val {{classname}}{{getter}}RetType) {
	*arg={{^isNullable}}&{{/isNullable}}val
}
{{/isInteger}}
{{#isLong}}
// isLong
type {{classname}}{{getter}}AttributeType = *int64
type {{classname}}{{getter}}ArgType = {{#isNullable}}*{{/isNullable}}int64
type {{classname}}{{getter}}RetType = {{#isNullable}}*{{/isNullable}}int64
func get{{classname}}{{getter}}AttributeTypeOk(arg {{classname}}{{getter}}AttributeType) (ret {{classname}}{{getter}}RetType, ok bool) {
	if arg == nil {
		{{#isNullable}}
		return nil,false
		{{/isNullable}}
		{{^isNullable}}
		return ret,false
		{{/isNullable}}
	}
	return {{^isNullable}}*{{/isNullable}}arg,true
}

func set{{classname}}{{getter}}AttributeType(arg *{{classname}}{{getter}}AttributeType, val {{classname}}{{getter}}RetType) {
	*arg={{^isNullable}}&{{/isNullable}}val
}
{{/isLong}}
{{#isString}}
{{! string-types are definitely used non-orthogonally, so we have to exclude some possibilities}}
{{^isArray}}
{{! skip arrays, they are addressed explicitly below}}
{{#isNullable}}
{{! nullable strings have a special type}}
// isNullableString
type {{classname}}{{getter}}AttributeType = *NullableString
func get{{classname}}{{getter}}AttributeTypeOk(arg {{classname}}{{getter}}AttributeType) (ret {{classname}}{{getter}}RetType, ok bool) {
	if arg == nil {
		{{#isNullable}}
		return nil,false
		{{/isNullable}}
		{{^isNullable}}
		return ret,false
		{{/isNullable}}
	}
	return arg.Get(),true
}

func set{{classname}}{{getter}}AttributeType(arg *{{classname}}{{getter}}AttributeType, val {{classname}}{{getter}}RetType) {
	if IsNil(*arg) {
		*arg = NewNullableString(val)
	} else {
		(*arg).Set(val)
	}
}
{{/isNullable}}
{{^isNullable}}
{{! non nullable strings are plain string pointers}}
// isNotNullableString
type {{classname}}{{getter}}AttributeType = *string
func get{{classname}}{{getter}}AttributeTypeOk(arg {{classname}}{{getter}}AttributeType) (ret {{classname}}{{getter}}RetType, ok bool) {
	if arg == nil {
		{{#isNullable}}
		return nil,false
		{{/isNullable}}
		{{^isNullable}}
		return ret,false
		{{/isNullable}}
	}
	return {{^isNullable}}*{{/isNullable}}arg,true
}

func set{{classname}}{{getter}}AttributeType(arg *{{classname}}{{getter}}AttributeType, val {{classname}}{{getter}}RetType) {
	*arg={{^isNullable}}&{{/isNullable}}val
}
{{/isNullable}}
type {{classname}}{{getter}}ArgType = {{#isNullable}}*{{/isNullable}}string
type {{classname}}{{getter}}RetType = {{#isNullable}}*{{/isNullable}}string
{{/isArray}}
{{/isString}}
{{#isAnyType}}
// isAny
type {{classname}}{{getter}}AttributeType = any
type {{classname}}{{getter}}ArgType = any
type {{classname}}{{getter}}RetType = any
func get{{classname}}{{getter}}AttributeTypeOk(arg {{classname}}{{getter}}AttributeType) (ret {{classname}}{{getter}}RetType, ok bool) {
	if arg == nil {
		{{#isNullable}}
		return nil,false
		{{/isNullable}}
		{{^isNullable}}
		return ret,false
		{{/isNullable}}
	}
	return {{^isNullable}}*{{/isNullable}}arg,true
}

func set{{classname}}{{getter}}AttributeType(arg *{{classname}}{{getter}}AttributeType, val {{classname}}{{getter}}RetType) {
	*arg={{^isNullable}}&{{/isNullable}}val
}
{{/isAnyType}}
{{/isEnum}}

{{#isDateTime}}
{{! special handling for date-time}}
// isDateTime
type {{classname}}{{getter}}AttributeType = *time.Time
type {{classname}}{{getter}}ArgType = {{#isNullable}}*{{/isNullable}}time.Time
type {{classname}}{{getter}}RetType = {{#isNullable}}*{{/isNullable}}time.Time
func get{{classname}}{{getter}}AttributeTypeOk(arg {{classname}}{{getter}}AttributeType) (ret {{classname}}{{getter}}RetType, ok bool) {
	if arg == nil {
		{{#isNullable}}
		return nil,false
		{{/isNullable}}
		{{^isNullable}}
		return ret,false
		{{/isNullable}}
	}
	return {{^isNullable}}*{{/isNullable}}arg,true
}

func set{{classname}}{{getter}}AttributeType(arg *{{classname}}{{getter}}AttributeType, val {{classname}}{{getter}}RetType) {
	*arg={{^isNullable}}&{{/isNullable}}val
}
{{/isDateTime}}
{{#isDate}}
{{! special handling for date}}
// isDate
type {{classname}}{{getter}}AttributeType = *time.Time
type {{classname}}{{getter}}ArgType = {{#isNullable}}*{{/isNullable}}time.Time
type {{classname}}{{getter}}RetType = {{#isNullable}}*{{/isNullable}}time.Time
func get{{classname}}{{getter}}AttributeTypeOk(arg {{classname}}{{getter}}AttributeType) (ret {{classname}}{{getter}}RetType, ok bool) {
	if arg == nil {
		{{#isNullable}}
		return nil,false
		{{/isNullable}}
		{{^isNullable}}
		return ret,false
		{{/isNullable}}
	}
	return {{^isNullable}}*{{/isNullable}}arg,true
}

func set{{classname}}{{getter}}AttributeType(arg *{{classname}}{{getter}}AttributeType, val {{classname}}{{getter}}RetType) {
	*arg={{^isNullable}}&{{/isNullable}}val
}
{{/isDate}}
{{#isEnumRef}}
{{! special handling for enums}}
{{#isEnum}}
// isEnum

// {{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}} {{{description}}}{{^description}}the model '{{{classname}}}'{{/description}}
// value type for enums
type {{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}} {{#isNumeric}}int{{/isNumeric}}{{^isNumeric}}string{{/isNumeric}}

// List of {{name}}
const (
	{{#allowableValues}}
	{{#enumVars}}
	{{^-first}}
	{{/-first}}
	{{{classname.toUpperCase}}}{{{enumName}}}_{{name}} {{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}} = {{{value}}}
	{{/enumVars}}
	{{/allowableValues}}
)

// All allowed values of {{{classname}}} enum
var Allowed{{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}EnumValues = []{{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}{
	{{#allowableValues}}
	{{#enumVars}}
	{{{value}}},
	{{/enumVars}}
	{{/allowableValues}}
}

func (v *{{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}) UnmarshalJSON(src []byte) error {
	// use a type alias to prevent infinite recursion during unmarshal, 
	// see https://biscuit.ninja/posts/go-avoid-an-infitine-loop-with-custom-json-unmarshallers
	type TmpJson {{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}
	var value TmpJson
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue TmpJson
	if value == zeroValue {
		return nil
	}
	enumTypeValue := {{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}(value)
	for _, existing := range Allowed{{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid {{classname}}", value)
}

// New{{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}FromValue returns a pointer to a valid {{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func New{{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}FromValue(v {{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}) (*{{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}, error) {
	ev := {{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for {{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}: valid values are %v", v, Allowed{{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v {{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}) IsValid() bool {
	for _, existing := range Allowed{{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to {{{name}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}} value
func (v {{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}) Ptr() *{{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}} {
	return &v
}

type Nullable{{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}} struct {
	value *{{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}
	isSet bool
}

func (v Nullable{{classname}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}) Get() *{{classname}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}} {
	return v.value
}

func (v *Nullable{{classname}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}) Set(val *{{classname}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}) {
	v.value = val
	v.isSet = true
}

func (v Nullable{{classname}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}) IsSet() bool {
	return v.isSet
}

func (v *Nullable{{classname}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullable{{classname}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}(val *{{classname}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}) *Nullable{{classname}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}} {
	return &Nullable{{classname}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}{value: val, isSet: true}
}

func (v Nullable{{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *Nullable{{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type {{classname}}{{getter}}AttributeType = *{{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}
type {{classname}}{{getter}}ArgType = {{#isNullable}}*{{/isNullable}}{{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}
type {{classname}}{{getter}}RetType = {{#isNullable}}*{{/isNullable}}{{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}}
func get{{classname}}{{getter}}AttributeTypeOk(arg {{classname}}{{getter}}AttributeType) (ret {{classname}}{{getter}}RetType, ok bool) {
	if arg == nil {
		{{#isNullable}}
		return nil,false
		{{/isNullable}}
		{{^isNullable}}
		return ret,false
		{{/isNullable}}
	}
	return {{^isNullable}}*{{/isNullable}}arg,true
}

func set{{classname}}{{getter}}AttributeType(arg *{{classname}}{{getter}}AttributeType, val {{classname}}{{getter}}RetType) {
	*arg={{^isNullable}}&{{/isNullable}}val
}
{{/isEnum}}
{{^isEnum}}
// isEnumRef
type {{classname}}{{getter}}AttributeType = *{{^isNumeric}}{{dataType}}{{/isNumeric}}{{#isNumeric}}int64{{/isNumeric}}
type {{classname}}{{getter}}ArgType = {{#isNullable}}*{{/isNullable}}{{^isNumeric}}{{dataType}}{{/isNumeric}}{{#isNumeric}}int64{{/isNumeric}}
type {{classname}}{{getter}}RetType = {{#isNullable}}*{{/isNullable}}{{^isNumeric}}{{dataType}}{{/isNumeric}}{{#isNumeric}}int64{{/isNumeric}}
func get{{classname}}{{getter}}AttributeTypeOk(arg {{classname}}{{getter}}AttributeType) (ret {{classname}}{{getter}}RetType, ok bool) {
	if arg == nil {
		{{#isNullable}}
		return nil,false
		{{/isNullable}}
		{{^isNullable}}
		return ret,false
		{{/isNullable}}
	}
	return {{^isNullable}}*{{/isNullable}}arg,true
}

func set{{classname}}{{getter}}AttributeType(arg *{{classname}}{{getter}}AttributeType, val {{classname}}{{getter}}RetType) {
	*arg={{^isNullable}}&{{/isNullable}}val
}
{{/isEnum}}
{{/isEnumRef}}
{{#isModel}}
{{! special handling for recursive datatypes}}
// isModel
type {{classname}}{{getter}}AttributeType = *{{dataType}}
type {{classname}}{{getter}}ArgType = {{#isNullable}}*{{/isNullable}}{{dataType}}
type {{classname}}{{getter}}RetType = {{#isNullable}}*{{/isNullable}}{{dataType}}
func get{{classname}}{{getter}}AttributeTypeOk(arg {{classname}}{{getter}}AttributeType) (ret {{classname}}{{getter}}RetType, ok bool) {
	if arg == nil {
		{{#isNullable}}
		return nil,false
		{{/isNullable}}
		{{^isNullable}}
		return ret,false
		{{/isNullable}}
	}
	return {{^isNullable}}*{{/isNullable}}arg,true
}

func set{{classname}}{{getter}}AttributeType(arg *{{classname}}{{getter}}AttributeType, val {{classname}}{{getter}}RetType) {
	*arg={{^isNullable}}&{{/isNullable}}val
}
{{/isModel}}
{{^isPrimitiveType}}
{{^isModel}}
{{^isMap}}
{{^isArray}}
{{^isDateTime}}
{{^isEnumRef}}
// fallback
{{! everything else will end up here}}
type {{classname}}{{getter}}AttributeType = *{{dataType}}
type {{classname}}{{getter}}ArgType = {{#isNullable}}*{{/isNullable}}{{dataType}}
type {{classname}}{{getter}}RetType = {{#isNullable}}*{{/isNullable}}{{dataType}}
func get{{classname}}{{getter}}AttributeTypeOk(arg {{classname}}{{getter}}AttributeType) (ret {{classname}}{{getter}}RetType, ok bool) {
	if arg == nil {
		{{#isNullable}}
		return nil,false
		{{/isNullable}}
		{{^isNullable}}
		return ret,false
		{{/isNullable}}
	}
	return {{^isNullable}}*{{/isNullable}}arg,true
}

func set{{classname}}{{getter}}AttributeType(arg *{{classname}}{{getter}}AttributeType, val {{classname}}{{getter}}RetType) {
	*arg={{^isNullable}}&{{/isNullable}}val
}
{{/isEnumRef}}
{{/isDateTime}}
{{/isArray}}
{{/isMap}}
{{/isModel}}
{{/isPrimitiveType}}
{{#isArray}}
// isArray
type {{classname}}{{getter}}AttributeType = *{{dataType}}
type {{classname}}{{getter}}ArgType = {{#isNullable}}*{{/isNullable}}{{dataType}}
type {{classname}}{{getter}}RetType = {{#isNullable}}*{{/isNullable}}{{dataType}}
func get{{classname}}{{getter}}AttributeTypeOk(arg {{classname}}{{getter}}AttributeType) (ret {{classname}}{{getter}}RetType, ok bool) {
	if arg == nil {
		{{#isNullable}}
		return nil,false
		{{/isNullable}}
		{{^isNullable}}
		return ret,false
		{{/isNullable}}
	}
	return {{^isNullable}}*{{/isNullable}}arg,true
}

func set{{classname}}{{getter}}AttributeType(arg *{{classname}}{{getter}}AttributeType, val {{classname}}{{getter}}RetType) {
	*arg={{^isNullable}}&{{/isNullable}}val
}
{{/isArray}}


{{#isFreeFormObject}}
// isFreeform
type {{classname}}{{getter}}AttributeType = *{{dataType}}
type {{classname}}{{getter}}ArgType = {{#isNullable}}*{{/isNullable}}{{dataType}}
type {{classname}}{{getter}}RetType = {{#isNullable}}*{{/isNullable}}{{dataType}}
func get{{classname}}{{getter}}AttributeTypeOk(arg {{classname}}{{getter}}AttributeType) (ret {{classname}}{{getter}}RetType, ok bool) {
	if arg == nil {
		{{#isNullable}}
		return nil,false
		{{/isNullable}}
		{{^isNullable}}
		return ret,false
		{{/isNullable}}
	}
	return {{^isNullable}}*{{/isNullable}}arg,true
}

func set{{classname}}{{getter}}AttributeType(arg *{{classname}}{{getter}}AttributeType, val {{classname}}{{getter}}RetType) {
	*arg={{^isNullable}}&{{/isNullable}}val
}
{{/isFreeFormObject}}
{{#isContainer}}
{{^isFreeFormObject}}
{{^isArray}}
// isContainer
type {{classname}}{{getter}}AttributeType = *{{dataType}}
type {{classname}}{{getter}}ArgType = {{#isNullable}}*{{/isNullable}}{{dataType}}
type {{classname}}{{getter}}RetType = {{#isNullable}}*{{/isNullable}}{{dataType}}
func get{{classname}}{{getter}}AttributeTypeOk(arg {{classname}}{{getter}}AttributeType) (ret {{classname}}{{getter}}RetType, ok bool) {
	if arg == nil {
		{{#isNullable}}
		return nil,false
		{{/isNullable}}
		{{^isNullable}}
		return ret,false
		{{/isNullable}}
	}
	return {{^isNullable}}*{{/isNullable}}arg,true
}

func set{{classname}}{{getter}}AttributeType(arg *{{classname}}{{getter}}AttributeType, val {{classname}}{{getter}}RetType) {
	*arg={{^isNullable}}&{{/isNullable}}val
}
{{/isArray}}
{{/isFreeFormObject}}
{{/isContainer}}
{{#isByteArray}}
// isByteArray
type {{classname}}{{getter}}AttributeType = *[]byte
type {{classname}}{{getter}}ArgType = {{#isNullable}}*{{/isNullable}}[]byte
type {{classname}}{{getter}}RetType = {{#isNullable}}*{{/isNullable}}[]byte
func get{{classname}}{{getter}}AttributeTypeOk(arg {{classname}}{{getter}}AttributeType) (ret {{classname}}{{getter}}RetType, ok bool) {
	if arg == nil {
		{{#isNullable}}
		return nil,false
		{{/isNullable}}
		{{^isNullable}}
		return ret,false
		{{/isNullable}}
	}
	return {{^isNullable}}*{{/isNullable}}arg,true
}

func set{{classname}}{{getter}}AttributeType(arg *{{classname}}{{getter}}AttributeType, val {{classname}}{{getter}}RetType) {
	*arg={{^isNullable}}&{{/isNullable}}val
}
{{/isByteArray}}
{{#isBoolean}}
// isBoolean
type {{classname}}{{getter}}AttributeType = *bool
type {{classname}}{{getter}}ArgType = {{#isNullable}}*{{/isNullable}}bool
type {{classname}}{{getter}}RetType = {{#isNullable}}*{{/isNullable}}bool
func get{{classname}}{{getter}}AttributeTypeOk(arg {{classname}}{{getter}}AttributeType) (ret {{classname}}{{getter}}RetType, ok bool) {
	if arg == nil {
		{{#isNullable}}
		return nil,false
		{{/isNullable}}
		{{^isNullable}}
		return ret,false
		{{/isNullable}}
	}
	return {{^isNullable}}*{{/isNullable}}arg,true
}

func set{{classname}}{{getter}}AttributeType(arg *{{classname}}{{getter}}AttributeType, val {{classname}}{{getter}}RetType) {
	*arg={{^isNullable}}&{{/isNullable}}val
}
{{/isBoolean}}

{{/vars}}

// {{classname}} {{{description}}}{{^description}}struct for {{{classname}}}{{/description}}
type {{classname}} struct {
{{#parent}}
{{^isMap}}
{{^isArray}}
	{{{parent}}}
{{/isArray}}
{{/isMap}}
{{#isArray}}
	Items {{{parent}}}
{{/isArray}}
{{/parent}}
{{#vars}}
{{^-first}}
{{/-first}}
{{#description}}
	// {{#deprecated}} Deprecated: {{/deprecated}}{{{.}}}
{{/description}}
{{^description}}
{{#deprecated}}
	// Deprecated: Check the GitHub changelog for alternatives
{{/deprecated}}
{{/description}}
{{#isShort}}
	// Can be cast to int32 without loss of precision.
{{/isShort}}
{{#isFloat}}
	// Can be cast to float32 without loss of precision.
{{/isFloat}}
{{#required}}
{{^isReadOnly}}
{{^isWriteOnly}}
    // REQUIRED
{{/isWriteOnly}}
{{/isReadOnly}}
{{/required}}
	{{name}} {{classname}}{{getter}}AttributeType `json:"{{baseName}}{{#required}}{{#isReadOnly}},omitempty{{/isReadOnly}}{{/required}}{{#required}}{{#isWriteOnly}},omitempty{{/isWriteOnly}}{{/required}}{{^required}},omitempty{{/required}}"{{#withXml}} xml:"{{baseName}}{{#isXmlAttribute}},attr{{/isXmlAttribute}}"{{/withXml}}{{#vendorExtensions.x-go-custom-tag}} {{{.}}}{{/vendorExtensions.x-go-custom-tag}}`
{{/vars}}
{{#isAdditionalPropertiesTrue}}
	AdditionalProperties map[string]interface{}
{{/isAdditionalPropertiesTrue}}
}


{{#isAdditionalPropertiesTrue}}
type _{{{classname}}} {{{classname}}}

{{/isAdditionalPropertiesTrue}}
{{^isAdditionalPropertiesTrue}}
{{#hasRequired}}
type _{{{classname}}} {{{classname}}}

{{/hasRequired}}
{{/isAdditionalPropertiesTrue}}
// New{{classname}} instantiates a new {{classname}} object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func New{{classname}}({{#requiredVars}}{{nameInCamelCase}} {{classname}}{{getter}}ArgType{{^-last}}, {{/-last}}{{/requiredVars}}) *{{classname}} {
	this := {{classname}}{}
{{#allVars}}
{{#required}}
	set{{classname}}{{getter}}AttributeType(&this.{{name}}, {{nameInCamelCase}})
{{/required}}
{{/allVars}}
	return &this
}

// New{{classname}}WithDefaults instantiates a new {{classname}} object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func New{{classname}}WithDefaults() *{{classname}} {
	this := {{classname}}{}
{{#vars}}
{{#defaultValue}}
{{^vendorExtensions.x-golang-is-container}}
{{^isReadOnly}}
{{#isEnum}}
	var {{nameInCamelCase}} {{{classname}}}{{#lambda.titlecase}}{{nameInCamelCase}}{{/lambda.titlecase}} = {{{.}}}
{{/isEnum}}
{{^isEnum}}
{{!we use datatypeWithEnum here, since it will represent the non-nullable name of the datatype, e.g. int64 for NullableInt64}}
	var {{nameInCamelCase}} {{#isInteger}}int64{{/isInteger}}{{#isNumber}}float64{{/isNumber}}{{^isNumber}}{{^isInteger}}{{dataType}}{{/isInteger}}{{/isNumber}} = {{{.}}}
{{/isEnum}}
{{#isNullable}}
	this.{{name}} = *New{{dataType}}(&{{nameInCamelCase}})
{{/isNullable}}
{{^isNullable}}
	this.{{name}} = &{{nameInCamelCase}}
{{/isNullable}}
{{/isReadOnly}}
{{/vendorExtensions.x-golang-is-container}}
{{/defaultValue}}
{{/vars}}
	return &this
}

{{#vars}}
{{#required}}
// Get{{name}} returns the {{name}} field value
{{#isNullable}}
// If the value is explicit nil, the zero value for {{vendorExtensions.x-go-base-type}} will be returned
{{/isNullable}}
{{#deprecated}}
// Deprecated
{{/deprecated}}
func (o *{{classname}}) Get{{name}}() (ret {{classname}}{{getter}}RetType) {
	ret,_ = o.Get{{name}}Ok()
	return ret
}

// Get{{name}}Ok returns a tuple with the {{name}} field value
// and a boolean to check if the value has been set.
{{#isNullable}}
// NOTE: If the value is an explicit nil, `nil, true` will be returned
{{/isNullable}}
{{#deprecated}}
// Deprecated
{{/deprecated}}
func (o *{{classname}}) Get{{name}}Ok() (ret {{classname}}{{getter}}RetType, ok bool) {
	return get{{classname}}{{getter}}AttributeTypeOk(o.{{name}})
}

// Set{{name}} sets field value
{{#deprecated}}
// Deprecated
{{/deprecated}}
func (o *{{classname}}) Set{{name}}(v {{classname}}{{getter}}RetType) {
	set{{classname}}{{getter}}AttributeType(&o.{{name}},v)
}

{{/required}}
{{^required}}
// Get{{name}} returns the {{name}} field value if set, zero value otherwise{{#isNullable}} (both if not set or set to explicit null){{/isNullable}}.
{{#deprecated}}
// Deprecated
{{/deprecated}}
func (o *{{classname}}) Get{{name}}() (res {{classname}}{{getter}}RetType) {
	res,_ = o.Get{{name}}Ok()
	return
}

// Get{{name}}Ok returns a tuple with the {{name}} field value if set, nil otherwise
// and a boolean to check if the value has been set.
{{#isNullable}}
// NOTE: If the value is an explicit nil, `nil, true` will be returned
{{/isNullable}}
{{#deprecated}}
// Deprecated
{{/deprecated}}
func (o *{{classname}}) Get{{name}}Ok() (ret {{classname}}{{getter}}RetType, ok bool) {
	return get{{classname}}{{getter}}AttributeTypeOk(o.{{name}})
}

// Has{{name}} returns a boolean if a field has been set.
func (o *{{classname}}) Has{{name}}() bool {
	_,ok:=o.Get{{name}}Ok()
	return ok
}

// Set{{name}} gets a reference to the given {{#isNumber}}float64{{/isNumber}}{{#isFloat}}float64{{/isFloat}}{{#isDouble}}float64{{/isDouble}}{{#isInteger}}int64{{/isInteger}}{{#isLong}}int64{{/isLong}}{{^isNumeric}}{{vendorExtensions.x-go-base-type}}{{/isNumeric}} and assigns it to the {{name}} field.
{{#deprecated}}
// Deprecated
{{/deprecated}}
func (o *{{classname}}) Set{{name}}(v {{classname}}{{getter}}RetType) {
	set{{classname}}{{getter}}AttributeType(&o.{{name}},v)
}


{{#isNullable}}
{{^vendorExtensions.x-golang-is-container}}
// Set{{name}}Nil sets the value for {{name}} to be an explicit nil
func (o *{{classname}}) Set{{name}}Nil() {
	o.{{name}} = nil
}

// Unset{{name}} ensures that no value is present for {{name}}, not even an explicit nil
func (o *{{classname}}) Unset{{name}}() {
	o.{{name}} = nil
}
{{/vendorExtensions.x-golang-is-container}}
{{/isNullable}}

{{/required}}
{{/vars}}
{{#vendorExtensions.x-go-generate-marshal-json}}
func (o {{classname}}) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

{{/vendorExtensions.x-go-generate-marshal-json}}
func (o {{classname}}) ToMap() (map[string]interface{}, error) {
	toSerialize := {{#isArray}}make([]interface{}, len(o.Items)){{/isArray}}{{^isArray}}map[string]interface{}{}{{/isArray}}
	{{#parent}}
	{{^isMap}}
	{{^isArray}}
	serialized{{parent}}, err{{parent}} := json.Marshal(o.{{parent}})
	if err{{parent}} != nil {
		return map[string]interface{}{}, err{{parent}}
	}
	err{{parent}} = json.Unmarshal([]byte(serialized{{parent}}), &toSerialize)
	if err{{parent}} != nil {
		return map[string]interface{}{}, err{{parent}}
	}
	{{/isArray}}
	{{/isMap}}
	{{#isArray}}
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	{{/isArray}}
	{{/parent}}
	{{#vars}}
	{{! if argument is nullable, only serialize it if it is set}}
	{{! if argument is not nullable, don't set it if it is nil}}
	if val,ok:=get{{classname}}{{getter}}AttributeTypeOk(o.{{name}});ok {
		toSerialize["{{{name}}}"] = val
	}
	{{/vars}}
	{{#isAdditionalPropertiesTrue}}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	{{/isAdditionalPropertiesTrue}}
	return toSerialize, nil
}

{{#vendorExtensions.x-go-generate-unmarshal-json}}
{{#isAdditionalPropertiesTrue}}
func (o *{{{classname}}}) UnmarshalJSON(data []byte) (err error) {
{{/isAdditionalPropertiesTrue}}
{{^isAdditionalPropertiesTrue}}
{{#hasRequired}}
func (o *{{{classname}}}) UnmarshalJSON(data []byte) (err error) {
{{/hasRequired}}
{{/isAdditionalPropertiesTrue}}
{{#hasRequired}}
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
{{#requiredVars}}
		"{{nameInCamelCase}}",
{{/requiredVars}}
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

{{/hasRequired}}
{{#isAdditionalPropertiesTrue}}
{{#parent}}
{{^isMap}}
	type {{classname}}WithoutEmbeddedStruct struct {
	{{#vars}}
	{{^-first}}
	{{/-first}}
	{{#description}}
		// {{{.}}}
	{{/description}}
	{{#deprecated}}
		// Deprecated
	{{/deprecated}}
		{{name}} {{^required}}{{^isNullable}}*{{/isNullable}}{{/required}}{{#isNumber}}float64{{/isNumber}}{{#isFloat}}float64{{/isFloat}}{{#isDouble}}float64{{/isDouble}}{{#isInteger}}int64{{/isInteger}}{{#isLong}}int64{{/isLong}}{{^isNumeric}}{{{dataType}}}{{/isNumeric}} `json:"{{{baseName}}}{{^required}},omitempty{{/required}}"{{#withXml}} xml:"{{{baseName}}}{{#isXmlAttribute}},attr{{/isXmlAttribute}}"{{/withXml}}{{#vendorExtensions.x-go-custom-tag}} {{{.}}}{{/vendorExtensions.x-go-custom-tag}}`
	{{/vars}}
	}

	var{{{classname}}}WithoutEmbeddedStruct := {{{classname}}}WithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &var{{{classname}}}WithoutEmbeddedStruct)
	if err == nil {
		var{{{classname}}} := _{{{classname}}}{}
		{{#vars}}
		var{{{classname}}}.{{{name}}} = var{{{classname}}}WithoutEmbeddedStruct.{{{name}}}
		{{/vars}}
		*o = {{{classname}}}(var{{{classname}}})
	} else {
		return err
	}

	var{{{classname}}} := _{{{classname}}}{}

	err = json.Unmarshal(data, &var{{{classname}}})
	if err == nil {
		o.{{{parent}}} = var{{{classname}}}.{{{parent}}}
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		{{#vars}}
		delete(additionalProperties, "{{{baseName}}}")
		{{/vars}}

		// remove fields from embedded structs
		reflect{{{parent}}} := reflect.ValueOf(o.{{{parent}}})
		for i := 0; i < reflect{{{parent}}}.Type().NumField(); i++ {
			t := reflect{{{parent}}}.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
{{/isMap}}
{{#isMap}}
	var{{{classname}}} := _{{{classname}}}{}

	err = json.Unmarshal(data, &var{{{classname}}})

	if err != nil {
		return err
	}

	*o = {{{classname}}}(var{{{classname}}})

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		{{#vars}}
		delete(additionalProperties, "{{{baseName}}}")
		{{/vars}}
		o.AdditionalProperties = additionalProperties
	}

	return err
{{/isMap}}
{{/parent}}
{{^parent}}
	var{{{classname}}} := _{{{classname}}}{}

	err = json.Unmarshal(data, &var{{{classname}}})

	if err != nil {
		return err
	}

	*o = {{{classname}}}(var{{{classname}}})

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		{{#vars}}
		delete(additionalProperties, "{{{baseName}}}")
		{{/vars}}
		o.AdditionalProperties = additionalProperties
	}

	return err
{{/parent}}
{{/isAdditionalPropertiesTrue}}
{{#isAdditionalPropertiesTrue}}
}

{{/isAdditionalPropertiesTrue}}
{{^isAdditionalPropertiesTrue}}
{{#hasRequired}}
	var{{{classname}}} := _{{{classname}}}{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&var{{{classname}}})

	if err != nil {
		return err
	}

	*o = {{{classname}}}(var{{{classname}}})

	return err
}

{{/hasRequired}}
{{/isAdditionalPropertiesTrue}}
{{#isArray}}
func (o *{{{classname}}}) UnmarshalJSON(data []byte) (err error) {
	return json.Unmarshal(data, &o.Items)
}

{{/isArray}}
{{/vendorExtensions.x-go-generate-unmarshal-json}}
{{>nullable_model}}
