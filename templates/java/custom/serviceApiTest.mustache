{{>licenseInfo}}

package {{invokerPackage}}.api;

import cloud.stackit.sdk.core.KeyFlowAuthenticator;
import cloud.stackit.sdk.core.auth.SetupAuth;
import cloud.stackit.sdk.core.config.CoreConfiguration;
import cloud.stackit.sdk.core.utils.TestUtils;
import java.io.IOException;
import okhttp3.Authenticator;
import okhttp3.OkHttpClient;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

/** API tests for {{serviceName}}Api */
public class {{serviceName}}ApiTest {
	@Test
	public void TestCustomHttpClient() throws IOException {
		// before
		CoreConfiguration conf =
				new CoreConfiguration().serviceAccountKey(TestUtils.MOCK_SERVICE_ACCOUNT_KEY);

		// when
		OkHttpClient httpClient = new OkHttpClient();
		{{serviceName}}Api api = new {{serviceName}}Api(httpClient);

		// then
		Assertions.assertEquals(httpClient, api.getApiClient().getHttpClient());
		// make sure the http client object is exactly the same object
		Assertions.assertSame(httpClient, api.getApiClient().getHttpClient());
	}

	@Test
	public void TestNoCustomHttpClient() throws IOException {
		// before
		CoreConfiguration conf =
				new CoreConfiguration().serviceAccountKey(TestUtils.MOCK_SERVICE_ACCOUNT_KEY);

		// when
		{{serviceName}}Api api = new {{serviceName}}Api(conf);

		// then
		/*
		 * verify a fresh OkHttpClient got created which will have the auth header set
		 * by the {@link cloud.stackit.sdk.core.KeyFlowAuthenticator}
		 */
		OkHttpClient httpClient = new OkHttpClient();
		Authenticator authenticator =
				new KeyFlowAuthenticator(httpClient, conf, SetupAuth.setupKeyFlow(conf));
		httpClient = httpClient.newBuilder().authenticator(authenticator).build();

		Assertions.assertNotNull(api.getApiClient().getHttpClient());
		Assertions.assertEquals(
				httpClient.authenticator().getClass(),
				api.getApiClient().getHttpClient().authenticator().getClass());
	}
}
