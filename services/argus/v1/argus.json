{
  "components": {
    "schemas": {
      "Alert": {
        "properties": {
          "global": {
            "$ref": "#/components/schemas/Global"
          },
          "inhibitRules": {
            "items": {
              "$ref": "#/components/schemas/InhibitRules"
            },
            "type": "array"
          },
          "receivers": {
            "items": {
              "$ref": "#/components/schemas/Receivers"
            },
            "type": "array"
          },
          "route": {
            "$ref": "#/components/schemas/Route"
          }
        },
        "required": [
          "receivers",
          "route"
        ],
        "type": "object"
      },
      "AlertGroupResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AlertGroup"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "data",
          "message"
        ],
        "type": "object"
      },
      "AlertGroupsResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/AlertGroup"
            },
            "type": "array"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "data",
          "message"
        ],
        "type": "object"
      },
      "AlertRecord": {
        "properties": {
          "expr": {
            "maxLength": 600,
            "minLength": 1,
            "title": "Expr",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "minLength": 1,
              "type": "string"
            },
            "title": "Labels",
            "type": "object"
          },
          "record": {
            "maxLength": 300,
            "minLength": 1,
            "title": "Record",
            "type": "string"
          }
        },
        "required": [
          "expr",
          "record"
        ],
        "type": "object"
      },
      "AlertRecordResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AlertRecord"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "data",
          "message"
        ],
        "type": "object"
      },
      "AlertRecordsResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/AlertRecord"
            },
            "type": "array"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "data",
          "message"
        ],
        "type": "object"
      },
      "AlertRule": {
        "properties": {
          "alert": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Alert",
            "type": "string"
          },
          "annotations": {
            "additionalProperties": {
              "minLength": 1,
              "type": "string"
            },
            "title": "Annotations",
            "type": "object"
          },
          "expr": {
            "maxLength": 600,
            "minLength": 1,
            "title": "Expr",
            "type": "string"
          },
          "for": {
            "default": "0s",
            "maxLength": 8,
            "minLength": 2,
            "title": "For",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "minLength": 1,
              "type": "string"
            },
            "title": "Labels",
            "type": "object"
          }
        },
        "required": [
          "alert",
          "expr"
        ],
        "type": "object"
      },
      "AlertRuleResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AlertRule"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "data",
          "message"
        ],
        "type": "object"
      },
      "AlertRulesResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/AlertRule"
            },
            "type": "array"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "data",
          "message"
        ],
        "type": "object"
      },
      "ApiUser": {
        "properties": {
          "apiUsers": {
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "type": "array"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "apiUsers",
          "message"
        ],
        "type": "object"
      },
      "ApiUserCreated": {
        "properties": {
          "apiUrl": {
            "minLength": 1,
            "title": "Apiurl",
            "type": "string"
          },
          "apiUrlSwagger": {
            "minLength": 1,
            "title": "Apiurlswagger",
            "type": "string"
          },
          "instanceId": {
            "minLength": 1,
            "title": "Instanceid",
            "type": "string"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          },
          "password": {
            "minLength": 1,
            "title": "Password",
            "type": "string"
          },
          "username": {
            "minLength": 1,
            "title": "Username",
            "type": "string"
          }
        },
        "required": [
          "apiUrl",
          "apiUrlSwagger",
          "instanceId",
          "message",
          "password",
          "username"
        ],
        "type": "object"
      },
      "BackupResponse": {
        "properties": {
          "alertConfigBackups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "alertRulesBackups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "grafanaBackups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          },
          "scrapeConfigBackups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "alertConfigBackups",
          "alertRulesBackups",
          "grafanaBackups",
          "message",
          "scrapeConfigBackups"
        ],
        "type": "object"
      },
      "BackupRetentionResponse": {
        "properties": {
          "alertConfigBackupRetention": {
            "maxLength": 8,
            "minLength": 2,
            "title": "Alertconfigbackupretention",
            "type": "string"
          },
          "alertRulesBackupRetention": {
            "maxLength": 8,
            "minLength": 2,
            "title": "Alertrulesbackupretention",
            "type": "string"
          },
          "grafanaBackupRetention": {
            "maxLength": 8,
            "minLength": 2,
            "title": "Grafanabackupretention",
            "type": "string"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          },
          "scrapeConfigBackupRetention": {
            "maxLength": 8,
            "minLength": 2,
            "title": "Scrapeconfigbackupretention",
            "type": "string"
          }
        },
        "required": [
          "alertConfigBackupRetention",
          "alertRulesBackupRetention",
          "grafanaBackupRetention",
          "message",
          "scrapeConfigBackupRetention"
        ],
        "type": "object"
      },
      "BackupSchedulePostResponse": {
        "properties": {
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          },
          "schedule": {
            "maxLength": 100,
            "minLength": 1,
            "title": "Schedule",
            "type": "string"
          }
        },
        "required": [
          "message",
          "schedule"
        ],
        "type": "object"
      },
      "BackupSchedulePutResponse": {
        "properties": {
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          },
          "schedule": {
            "$ref": "#/components/schemas/BackupSchedule"
          }
        },
        "required": [
          "message",
          "schedule"
        ],
        "type": "object"
      },
      "BackupScheduleResponse": {
        "properties": {
          "alertConfigBackupSchedules": {
            "items": {
              "$ref": "#/components/schemas/BackupSchedule"
            },
            "type": "array"
          },
          "alertRulesBackupSchedules": {
            "items": {
              "$ref": "#/components/schemas/BackupSchedule"
            },
            "type": "array"
          },
          "grafanaBackupSchedules": {
            "items": {
              "$ref": "#/components/schemas/BackupSchedule"
            },
            "type": "array"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          },
          "scrapeConfigBackupSchedules": {
            "items": {
              "$ref": "#/components/schemas/BackupSchedule"
            },
            "type": "array"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "BasicAuth": {
        "properties": {
          "password": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Password",
            "type": "string"
          },
          "username": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Username",
            "type": "string"
          }
        },
        "required": [
          "password",
          "username"
        ],
        "type": "object"
      },
      "BucketRetentionTimeRespond": {
        "properties": {
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          },
          "metricsRetentionTime1h": {
            "maxLength": 8,
            "minLength": 2,
            "title": "Metricsretentiontime1h",
            "type": "string"
          },
          "metricsRetentionTime5m": {
            "maxLength": 8,
            "minLength": 2,
            "title": "Metricsretentiontime5m",
            "type": "string"
          },
          "metricsRetentionTimeRaw": {
            "maxLength": 8,
            "minLength": 2,
            "title": "Metricsretentiontimeraw",
            "type": "string"
          }
        },
        "required": [
          "message",
          "metricsRetentionTime1h",
          "metricsRetentionTime5m",
          "metricsRetentionTimeRaw"
        ],
        "type": "object"
      },
      "CertCheckChildResponse": {
        "properties": {
          "id": {
            "minLength": 1,
            "title": "Id",
            "type": "string"
          },
          "source": {
            "minLength": 1,
            "title": "Source",
            "type": "string"
          }
        },
        "required": [
          "id",
          "source"
        ],
        "type": "object"
      },
      "CertCheckResponse": {
        "properties": {
          "certChecks": {
            "items": {
              "$ref": "#/components/schemas/CertCheckChildResponse"
            },
            "maxItems": 100,
            "type": "array"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "certChecks",
          "message"
        ],
        "type": "object"
      },
      "Credentials": {
        "properties": {
          "password": {
            "minLength": 1,
            "title": "Password",
            "type": "string"
          },
          "username": {
            "minLength": 1,
            "title": "Username",
            "type": "string"
          }
        },
        "required": [
          "password",
          "username"
        ],
        "type": "object"
      },
      "CredentialsRemoteWriteDeleteResponse": {
        "properties": {
          "maxLimit": {
            "maximum": 6000000,
            "minimum": 0,
            "title": "Maxlimit",
            "type": "integer"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "maxLimit",
          "message"
        ],
        "type": "object"
      },
      "Dashboard": {
        "properties": {
          "dashboardUrl": {
            "minLength": 1,
            "title": "Dashboardurl",
            "type": "string"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "dashboardUrl",
          "message"
        ],
        "type": "object"
      },
      "ElasticsearchCheckChildResponse": {
        "properties": {
          "id": {
            "minLength": 1,
            "title": "Id",
            "type": "string"
          },
          "password": {
            "minLength": 1,
            "title": "Password",
            "type": "string"
          },
          "server": {
            "minLength": 1,
            "title": "Server",
            "type": "string"
          },
          "username": {
            "minLength": 1,
            "title": "Username",
            "type": "string"
          }
        },
        "required": [
          "id",
          "server"
        ],
        "type": "object"
      },
      "ElasticsearchCheckResponse": {
        "properties": {
          "elasticsearchChecks": {
            "items": {
              "$ref": "#/components/schemas/ElasticsearchCheckChildResponse"
            },
            "maxItems": 100,
            "type": "array"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "elasticsearchChecks",
          "message"
        ],
        "type": "object"
      },
      "EmailConfig": {
        "properties": {
          "authIdentity": {
            "format": "email",
            "maxLength": 200,
            "minLength": 1,
            "title": "Authidentity",
            "type": "string"
          },
          "authPassword": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Authpassword",
            "type": "string"
          },
          "authUsername": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Authusername",
            "type": "string"
          },
          "from": {
            "format": "email",
            "maxLength": 200,
            "minLength": 1,
            "title": "From",
            "type": "string"
          },
          "sendResolved": {
            "default": false,
            "title": "Sendresolved",
            "type": "boolean"
          },
          "smarthost": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Smarthost",
            "type": "string"
          },
          "to": {
            "format": "email",
            "maxLength": 200,
            "minLength": 1,
            "title": "To",
            "type": "string"
          }
        },
        "required": [
          "to"
        ],
        "type": "object"
      },
      "Error": {
        "properties": {
          "errors": {
            "items": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "Global": {
        "properties": {
          "opsgenieApiKey": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Opsgenieapikey",
            "type": "string"
          },
          "opsgenieApiUrl": {
            "format": "uri",
            "maxLength": 200,
            "minLength": 1,
            "title": "Opsgenieapiurl",
            "type": "string"
          },
          "resolveTimeout": {
            "default": "5m",
            "maxLength": 8,
            "minLength": 2,
            "title": "Resolvetimeout",
            "type": "string"
          },
          "smtpAuthIdentity": {
            "format": "email",
            "maxLength": 200,
            "minLength": 1,
            "title": "Smtpauthidentity",
            "type": "string"
          },
          "smtpAuthPassword": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Smtpauthpassword",
            "type": "string"
          },
          "smtpAuthUsername": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Smtpauthusername",
            "type": "string"
          },
          "smtpFrom": {
            "format": "email",
            "maxLength": 200,
            "minLength": 1,
            "title": "Smtpfrom",
            "type": "string"
          },
          "smtpSmarthost": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Smtpsmarthost",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GrafanaOauth": {
        "properties": {
          "apiUrl": {
            "maxLength": 300,
            "minLength": 1,
            "title": "Apiurl",
            "type": "string"
          },
          "authUrl": {
            "maxLength": 300,
            "minLength": 1,
            "title": "Authurl",
            "type": "string"
          },
          "enabled": {
            "title": "Enabled",
            "type": "boolean"
          },
          "name": {
            "maxLength": 300,
            "minLength": 1,
            "title": "Name",
            "type": "string"
          },
          "oauthClientId": {
            "maxLength": 300,
            "minLength": 1,
            "title": "Oauthclientid",
            "type": "string"
          },
          "oauthClientSecret": {
            "maxLength": 300,
            "minLength": 1,
            "title": "Oauthclientsecret",
            "type": "string"
          },
          "roleAttributePath": {
            "maxLength": 500,
            "minLength": 1,
            "title": "Roleattributepath",
            "type": "string"
          },
          "roleAttributeStrict": {
            "default": true,
            "title": "Roleattributestrict",
            "type": "boolean"
          },
          "scopes": {
            "default": "openid profile email",
            "maxLength": 300,
            "minLength": 1,
            "title": "Scopes",
            "type": "string"
          },
          "tokenUrl": {
            "maxLength": 300,
            "minLength": 1,
            "title": "Tokenurl",
            "type": "string"
          },
          "usePkce": {
            "title": "Usepkce",
            "type": "boolean"
          }
        },
        "required": [
          "apiUrl",
          "authUrl",
          "enabled",
          "oauthClientId",
          "oauthClientSecret",
          "roleAttributePath",
          "tokenUrl"
        ],
        "type": "object"
      },
      "HTTPServiceSD": {
        "properties": {
          "basicAuth": {
            "$ref": "#/components/schemas/BasicAuth"
          },
          "oauth2": {
            "$ref": "#/components/schemas/OAuth2"
          },
          "refreshInterval": {
            "default": "60s",
            "maxLength": 8,
            "minLength": 2,
            "title": "Refreshinterval",
            "type": "string"
          },
          "tlsConfig": {
            "$ref": "#/components/schemas/TLSConfig"
          },
          "url": {
            "maxLength": 400,
            "minLength": 1,
            "title": "Url",
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "HttpCheckChildResponse": {
        "properties": {
          "id": {
            "minLength": 1,
            "title": "Id",
            "type": "string"
          },
          "url": {
            "minLength": 1,
            "title": "Url",
            "type": "string"
          }
        },
        "required": [
          "url",
          "id"
        ],
        "type": "object"
      },
      "HttpCheckResponse": {
        "properties": {
          "httpChecks": {
            "items": {
              "$ref": "#/components/schemas/HttpCheckChildResponse"
            },
            "maxItems": 100,
            "type": "array"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "httpChecks",
          "message"
        ],
        "type": "object"
      },
      "InhibitRules": {
        "properties": {
          "equal": {
            "items": {
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            },
            "maxItems": 10,
            "type": "array"
          },
          "sourceMatch": {
            "additionalProperties": {
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            },
            "title": "Sourcematch",
            "type": "object"
          },
          "sourceMatchRe": {
            "additionalProperties": {
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            },
            "title": "Sourcematchre",
            "type": "object"
          },
          "sourceMatchers": {
            "items": {
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            },
            "maxItems": 5,
            "type": "array"
          },
          "targetMatch": {
            "additionalProperties": {
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            },
            "title": "Targetmatch",
            "type": "object"
          },
          "targetMatchRe": {
            "additionalProperties": {
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            },
            "title": "Targetmatchre",
            "type": "object"
          },
          "targetMatchers": {
            "items": {
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            },
            "maxItems": 5,
            "type": "array"
          }
        },
        "type": "object"
      },
      "Instance": {
        "properties": {
          "cluster": {
            "maxLength": 63,
            "minLength": 1,
            "title": "Cluster",
            "type": "string"
          },
          "grafanaPublicReadAccess": {
            "title": "Grafanapublicreadaccess",
            "type": "boolean"
          },
          "grafanaUseStackitSso": {
            "title": "Grafanausestackitsso",
            "type": "boolean"
          },
          "instance": {
            "maxLength": 63,
            "minLength": 1,
            "title": "Instance",
            "type": "string"
          },
          "metricsRetentionTime1h": {
            "minimum": 0,
            "title": "Metricsretentiontime1h",
            "type": "integer"
          },
          "metricsRetentionTime5m": {
            "minimum": 0,
            "title": "Metricsretentiontime5m",
            "type": "integer"
          },
          "metricsRetentionTimeRaw": {
            "minimum": 0,
            "title": "Metricsretentiontimeraw",
            "type": "integer"
          },
          "name": {
            "maxLength": 300,
            "minLength": 1,
            "title": "Name",
            "type": "string"
          },
          "plan": {
            "$ref": "#/components/schemas/PlanModel"
          },
          "state": {
            "enum": [
              "Component creation started",
              "Component creation failed",
              "Component creation succeeded. Now need to check readiness",
              "Component creation succeeded",
              "Component deletion started",
              "Component deletion failed",
              "Component deletion succeeded",
              "Component deletion of routine succeeded. Now need to check if resources gone",
              "Component deletion buckets succeeded",
              "Component update failed",
              "Component update started",
              "Component update creation succeeded",
              "Component update downgrade deletion resources succeeded"
            ],
            "title": "State",
            "type": "string"
          }
        },
        "required": [
          "cluster",
          "grafanaPublicReadAccess",
          "grafanaUseStackitSso",
          "instance",
          "metricsRetentionTime1h",
          "metricsRetentionTime5m",
          "metricsRetentionTimeRaw",
          "plan"
        ],
        "type": "object"
      },
      "InstanceSensitiveData": {
        "properties": {
          "alertingUrl": {
            "minLength": 1,
            "title": "Alertingurl",
            "type": "string"
          },
          "cluster": {
            "maxLength": 63,
            "minLength": 1,
            "title": "Cluster",
            "type": "string"
          },
          "dashboardUrl": {
            "minLength": 1,
            "title": "Dashboardurl",
            "type": "string"
          },
          "grafanaAdminPassword": {
            "minLength": 32,
            "title": "Grafanaadminpassword",
            "type": "string"
          },
          "grafanaAdminUser": {
            "minLength": 1,
            "title": "Grafanaadminuser",
            "type": "string"
          },
          "grafanaPublicReadAccess": {
            "title": "Grafanapublicreadaccess",
            "type": "boolean"
          },
          "grafanaUrl": {
            "minLength": 1,
            "title": "Grafanaurl",
            "type": "string"
          },
          "grafanaUseStackitSso": {
            "title": "Grafanausestackitsso",
            "type": "boolean"
          },
          "instance": {
            "maxLength": 63,
            "minLength": 1,
            "title": "Instance",
            "type": "string"
          },
          "jaegerTracesUrl": {
            "minLength": 1,
            "title": "Jaegertracesurl",
            "type": "string"
          },
          "jaegerUiUrl": {
            "minLength": 1,
            "title": "Jaegeruiurl",
            "type": "string"
          },
          "logsPushUrl": {
            "minLength": 1,
            "title": "Logspushurl",
            "type": "string"
          },
          "logsUrl": {
            "minLength": 1,
            "title": "Logsurl",
            "type": "string"
          },
          "metricsRetentionTime1h": {
            "minimum": 0,
            "title": "Metricsretentiontime1h",
            "type": "integer"
          },
          "metricsRetentionTime5m": {
            "minimum": 0,
            "title": "Metricsretentiontime5m",
            "type": "integer"
          },
          "metricsRetentionTimeRaw": {
            "minimum": 0,
            "title": "Metricsretentiontimeraw",
            "type": "integer"
          },
          "metricsUrl": {
            "minLength": 1,
            "title": "Metricsurl",
            "type": "string"
          },
          "name": {
            "default": "",
            "maxLength": 300,
            "title": "Name",
            "type": "string"
          },
          "otlpTracesUrl": {
            "minLength": 1,
            "title": "Otlptracesurl",
            "type": "string"
          },
          "plan": {
            "$ref": "#/components/schemas/PlanModel"
          },
          "pushMetricsUrl": {
            "minLength": 1,
            "title": "Pushmetricsurl",
            "type": "string"
          },
          "targetsUrl": {
            "minLength": 1,
            "title": "Targetsurl",
            "type": "string"
          },
          "zipkinSpansUrl": {
            "minLength": 1,
            "title": "Zipkinspansurl",
            "type": "string"
          }
        },
        "required": [
          "alertingUrl",
          "cluster",
          "dashboardUrl",
          "grafanaAdminPassword",
          "grafanaAdminUser",
          "grafanaPublicReadAccess",
          "grafanaUseStackitSso",
          "grafanaUrl",
          "instance",
          "jaegerTracesUrl",
          "jaegerUiUrl",
          "logsPushUrl",
          "logsUrl",
          "metricsRetentionTime1h",
          "metricsRetentionTime5m",
          "metricsRetentionTimeRaw",
          "metricsUrl",
          "otlpTracesUrl",
          "plan",
          "pushMetricsUrl",
          "targetsUrl",
          "zipkinSpansUrl"
        ],
        "type": "object"
      },
      "Job": {
        "properties": {
          "basicAuth": {
            "$ref": "#/components/schemas/BasicAuth"
          },
          "bearerToken": {
            "minLength": 1,
            "title": "Bearertoken",
            "type": "string"
          },
          "honorLabels": {
            "default": false,
            "title": "Honorlabels",
            "type": "boolean"
          },
          "honorTimeStamps": {
            "default": false,
            "title": "Honortimestamps",
            "type": "boolean"
          },
          "httpSdConfigs": {
            "items": {
              "$ref": "#/components/schemas/HTTPServiceSD"
            },
            "type": "array"
          },
          "jobName": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Jobname",
            "type": "string"
          },
          "metricsPath": {
            "default": "/metrics",
            "maxLength": 200,
            "minLength": 1,
            "title": "Metricspath",
            "type": "string"
          },
          "metricsRelabelConfigs": {
            "items": {
              "$ref": "#/components/schemas/MetricsRelabelConfig"
            },
            "type": "array"
          },
          "oauth2": {
            "$ref": "#/components/schemas/OAuth2"
          },
          "params": {
            "additionalProperties": {
              "items": {
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "maxItems": 5,
              "type": "array"
            },
            "title": "Params",
            "type": "object"
          },
          "sampleLimit": {
            "maximum": 1000000000,
            "minimum": 1,
            "title": "Samplelimit",
            "type": "integer"
          },
          "scheme": {
            "default": "http",
            "enum": [
              "http",
              "https"
            ],
            "title": "Scheme",
            "type": "string"
          },
          "scrapeInterval": {
            "maxLength": 8,
            "minLength": 2,
            "title": "Scrapeinterval",
            "type": "string"
          },
          "scrapeTimeout": {
            "maxLength": 8,
            "minLength": 2,
            "title": "Scrapetimeout",
            "type": "string"
          },
          "staticConfigs": {
            "items": {
              "$ref": "#/components/schemas/StaticConfigs"
            },
            "type": "array"
          },
          "tlsConfig": {
            "$ref": "#/components/schemas/TLSConfig"
          }
        },
        "required": [
          "jobName",
          "scrapeInterval",
          "scrapeTimeout",
          "staticConfigs"
        ],
        "type": "object"
      },
      "LogsConfig": {
        "properties": {
          "retention": {
            "maxLength": 10,
            "minLength": 2,
            "title": "Retention",
            "type": "string"
          }
        },
        "required": [
          "retention"
        ],
        "type": "object"
      },
      "LogsConfigResponse": {
        "properties": {
          "config": {
            "$ref": "#/components/schemas/LogsConfig"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "config",
          "message"
        ],
        "type": "object"
      },
      "Message": {
        "properties": {
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "MetricsRelabelConfig": {
        "properties": {
          "action": {
            "default": "replace",
            "enum": [
              "replace",
              "keep",
              "drop",
              "hashmod",
              "labelmap",
              "labeldrop",
              "labelkeep"
            ],
            "title": "Action",
            "type": "string"
          },
          "modulus": {
            "maximum": 200,
            "title": "Modulus",
            "type": "integer"
          },
          "regex": {
            "default": ".*",
            "maxLength": 400,
            "minLength": 1,
            "title": "Regex",
            "type": "string"
          },
          "replacement": {
            "default": "$1",
            "maxLength": 200,
            "minLength": 1,
            "title": "Replacement",
            "type": "string"
          },
          "separator": {
            "default": ";",
            "maxLength": 20,
            "minLength": 1,
            "title": "Separator",
            "type": "string"
          },
          "sourceLabels": {
            "items": {
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            },
            "maxItems": 5,
            "type": "array"
          },
          "targetLabel": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Targetlabel",
            "type": "string"
          }
        },
        "required": [
          "sourceLabels"
        ],
        "type": "object"
      },
      "MongodbCheckChildResponse": {
        "properties": {
          "id": {
            "minLength": 1,
            "title": "Id",
            "type": "string"
          },
          "server": {
            "minLength": 1,
            "title": "Server",
            "type": "string"
          }
        },
        "required": [
          "server",
          "id"
        ],
        "type": "object"
      },
      "MongodbCheckResponse": {
        "properties": {
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          },
          "mongodbChecks": {
            "items": {
              "$ref": "#/components/schemas/MongodbCheckChildResponse"
            },
            "maxItems": 100,
            "type": "array"
          }
        },
        "required": [
          "message",
          "mongodbChecks"
        ],
        "type": "object"
      },
      "MySQLCheckResponse": {
        "properties": {
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          },
          "mysqlChecks": {
            "items": {
              "$ref": "#/components/schemas/MySQLCheckChildResponse"
            },
            "maxItems": 100,
            "type": "array"
          }
        },
        "required": [
          "message",
          "mysqlChecks"
        ],
        "type": "object"
      },
      "NetworkCheckChildResponse": {
        "properties": {
          "address": {
            "minLength": 1,
            "title": "Address",
            "type": "string"
          },
          "id": {
            "minLength": 1,
            "title": "Id",
            "type": "string"
          }
        },
        "required": [
          "address",
          "id"
        ],
        "type": "object"
      },
      "NetworkCheckResponse": {
        "properties": {
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          },
          "networkChecks": {
            "items": {
              "$ref": "#/components/schemas/NetworkCheckChildResponse"
            },
            "maxItems": 100,
            "type": "array"
          }
        },
        "required": [
          "message",
          "networkChecks"
        ],
        "type": "object"
      },
      "OAuth2": {
        "properties": {
          "clientId": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Clientid",
            "type": "string"
          },
          "clientSecret": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Clientsecret",
            "type": "string"
          },
          "scopes": {
            "items": {
              "maxLength": 100,
              "minLength": 1,
              "type": "string"
            },
            "maxItems": 10,
            "type": "array"
          },
          "tlsConfig": {
            "$ref": "#/components/schemas/TLSConfig"
          },
          "tokenUrl": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Tokenurl",
            "type": "string"
          }
        },
        "required": [
          "clientId",
          "clientSecret",
          "tokenUrl"
        ],
        "type": "object"
      },
      "Offerings": {
        "properties": {
          "description": {
            "maxLength": 1000,
            "minLength": 1,
            "title": "Description",
            "type": "string"
          },
          "documentationUrl": {
            "maxLength": 1000,
            "minLength": 1,
            "title": "Documentationurl",
            "type": "string"
          },
          "imageUrl": {
            "maxLength": 1000,
            "minLength": 1,
            "title": "Imageurl",
            "type": "string"
          },
          "name": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Name",
            "type": "string"
          },
          "plans": {
            "items": {
              "$ref": "#/components/schemas/Plan"
            },
            "type": "array"
          },
          "tags": {
            "items": {
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            },
            "maxItems": 10,
            "type": "array"
          }
        },
        "required": [
          "description",
          "documentationUrl",
          "imageUrl",
          "name",
          "plans",
          "tags"
        ],
        "type": "object"
      },
      "OpsgenieConfig": {
        "properties": {
          "apiKey": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Apikey",
            "type": "string"
          },
          "apiUrl": {
            "format": "uri",
            "maxLength": 400,
            "minLength": 1,
            "title": "Apiurl",
            "type": "string"
          },
          "priority": {
            "maxLength": 2,
            "minLength": 2,
            "title": "Priority",
            "type": "string"
          },
          "sendResolved": {
            "default": true,
            "title": "Sendresolved",
            "type": "boolean"
          },
          "tags": {
            "maxLength": 400,
            "minLength": 1,
            "title": "Tags",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PermissionDenied": {
        "properties": {
          "detail": {
            "minLength": 1,
            "title": "Detail",
            "type": "string"
          }
        },
        "required": [
          "detail"
        ],
        "type": "object"
      },
      "PingCheckChildResponse": {
        "properties": {
          "id": {
            "minLength": 1,
            "title": "Id",
            "type": "string"
          },
          "url": {
            "minLength": 1,
            "title": "Url",
            "type": "string"
          }
        },
        "required": [
          "url",
          "id"
        ],
        "type": "object"
      },
      "PingCheckResponse": {
        "properties": {
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          },
          "pingChecks": {
            "items": {
              "$ref": "#/components/schemas/PingCheckChildResponse"
            },
            "maxItems": 100,
            "type": "array"
          }
        },
        "required": [
          "message",
          "pingChecks"
        ],
        "type": "object"
      },
      "PlanModel": {
        "properties": {
          "alertMatchers": {
            "title": "Alertmatchers",
            "type": "integer"
          },
          "alertReceivers": {
            "title": "Alertreceivers",
            "type": "integer"
          },
          "alertRules": {
            "title": "Alertrules",
            "type": "integer"
          },
          "amount": {
            "maximum": 10000000,
            "minimum": 0,
            "title": "Amount",
            "type": "number"
          },
          "bucketSize": {
            "minimum": 20,
            "title": "Bucketsize",
            "type": "integer"
          },
          "description": {
            "maxLength": 1000,
            "minLength": 1,
            "title": "Description",
            "type": "string"
          },
          "grafanaGlobalDashboards": {
            "title": "Grafanaglobaldashboards",
            "type": "integer"
          },
          "grafanaGlobalOrgs": {
            "title": "Grafanaglobalorgs",
            "type": "integer"
          },
          "grafanaGlobalSessions": {
            "title": "Grafanaglobalsessions",
            "type": "integer"
          },
          "grafanaGlobalUsers": {
            "title": "Grafanaglobalusers",
            "type": "integer"
          },
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "logsAlert": {
            "title": "Logsalert",
            "type": "integer"
          },
          "logsStorage": {
            "title": "Logsstorage",
            "type": "integer"
          },
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "title": "Name",
            "type": "string"
          },
          "planId": {
            "format": "uuid",
            "title": "Planid",
            "type": "string"
          },
          "samplesPerScrape": {
            "title": "Samplesperscrape",
            "type": "integer"
          },
          "targetNumber": {
            "title": "Targetnumber",
            "type": "integer"
          },
          "totalMetricSamples": {
            "title": "Totalmetricsamples",
            "type": "integer"
          },
          "tracesStorage": {
            "title": "Tracesstorage",
            "type": "integer"
          }
        },
        "required": [
          "alertMatchers",
          "alertReceivers",
          "alertRules",
          "bucketSize",
          "grafanaGlobalDashboards",
          "grafanaGlobalOrgs",
          "grafanaGlobalSessions",
          "grafanaGlobalUsers",
          "id",
          "logsAlert",
          "logsStorage",
          "planId",
          "samplesPerScrape",
          "totalMetricSamples",
          "targetNumber",
          "tracesStorage"
        ],
        "type": "object"
      },
      "PostgresqlCheckChildResponse": {
        "properties": {
          "address": {
            "minLength": 1,
            "title": "Address",
            "type": "string"
          },
          "id": {
            "minLength": 1,
            "title": "Id",
            "type": "string"
          }
        },
        "required": [
          "address",
          "id"
        ],
        "type": "object"
      },
      "PostgresqlCheckResponse": {
        "properties": {
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          },
          "postgresqlChecks": {
            "items": {
              "$ref": "#/components/schemas/PostgresqlCheckChildResponse"
            },
            "maxItems": 100,
            "type": "array"
          }
        },
        "required": [
          "message",
          "postgresqlChecks"
        ],
        "type": "object"
      },
      "ProjectInstanceFull": {
        "properties": {
          "error": {
            "maxLength": 200,
            "minLength": 1,
            "nullable": true,
            "title": "Error",
            "type": "string"
          },
          "id": {
            "minLength": 1,
            "title": "Id",
            "type": "string"
          },
          "instance": {
            "maxLength": 63,
            "minLength": 1,
            "title": "Instance",
            "type": "string"
          },
          "name": {
            "maxLength": 300,
            "minLength": 1,
            "title": "Name",
            "type": "string"
          },
          "planName": {
            "maxLength": 40,
            "minLength": 1,
            "title": "Planname",
            "type": "string"
          },
          "serviceName": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Servicename",
            "type": "string"
          },
          "status": {
            "enum": [
              "CREATING",
              "CREATE_SUCCEEDED",
              "CREATE_FAILED",
              "DELETING",
              "DELETE_SUCCEEDED",
              "DELETE_FAILED",
              "UPDATING",
              "UPDATE_SUCCEEDED",
              "UPDATE_FAILED"
            ],
            "title": "Status",
            "type": "string"
          }
        },
        "required": [
          "id",
          "instance",
          "planName",
          "serviceName",
          "status"
        ],
        "type": "object"
      },
      "RabbitMQCheckChildResponse": {
        "properties": {
          "id": {
            "minLength": 1,
            "title": "Id",
            "type": "string"
          },
          "password": {
            "minLength": 1,
            "title": "Password",
            "type": "string"
          },
          "url": {
            "minLength": 1,
            "title": "Url",
            "type": "string"
          },
          "username": {
            "minLength": 1,
            "title": "Username",
            "type": "string"
          }
        },
        "required": [
          "id",
          "url"
        ],
        "type": "object"
      },
      "RabbitMQCheckResponse": {
        "properties": {
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          },
          "rabbitmqChecks": {
            "items": {
              "$ref": "#/components/schemas/RabbitMQCheckChildResponse"
            },
            "maxItems": 100,
            "type": "array"
          }
        },
        "required": [
          "message",
          "rabbitmqChecks"
        ],
        "type": "object"
      },
      "Receivers": {
        "properties": {
          "emailConfigs": {
            "items": {
              "$ref": "#/components/schemas/EmailConfig"
            },
            "type": "array"
          },
          "name": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Name",
            "type": "string"
          },
          "opsgenieConfigs": {
            "items": {
              "$ref": "#/components/schemas/OpsgenieConfig"
            },
            "type": "array"
          },
          "webHookConfigs": {
            "items": {
              "$ref": "#/components/schemas/WebHook"
            },
            "type": "array"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "RedisCheckChildResponse": {
        "properties": {
          "id": {
            "minLength": 1,
            "title": "Id",
            "type": "string"
          },
          "password": {
            "minLength": 1,
            "title": "Password",
            "type": "string"
          },
          "server": {
            "minLength": 1,
            "title": "Server",
            "type": "string"
          },
          "username": {
            "minLength": 1,
            "title": "Username",
            "type": "string"
          }
        },
        "required": [
          "server",
          "id"
        ],
        "type": "object"
      },
      "RedisCheckResponse": {
        "properties": {
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          },
          "redisChecks": {
            "items": {
              "$ref": "#/components/schemas/RedisCheckChildResponse"
            },
            "maxItems": 100,
            "type": "array"
          }
        },
        "required": [
          "message",
          "redisChecks"
        ],
        "type": "object"
      },
      "Route": {
        "properties": {
          "continue": {
            "default": false,
            "title": "Continue",
            "type": "boolean"
          },
          "groupBy": {
            "items": {
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            },
            "maxItems": 5,
            "type": "array"
          },
          "groupInterval": {
            "default": "5m",
            "maxLength": 8,
            "minLength": 2,
            "title": "Groupinterval",
            "type": "string"
          },
          "groupWait": {
            "default": "30s",
            "maxLength": 8,
            "minLength": 2,
            "title": "Groupwait",
            "type": "string"
          },
          "match": {
            "additionalProperties": {
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            },
            "title": "Match",
            "type": "object"
          },
          "matchRe": {
            "additionalProperties": {
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            },
            "title": "Matchre",
            "type": "object"
          },
          "receiver": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Receiver",
            "type": "string"
          },
          "repeatInterval": {
            "default": "4h",
            "maxLength": 8,
            "minLength": 2,
            "title": "Repeatinterval",
            "type": "string"
          },
          "routes": {
            "items": {
              "$ref": "#/components/schemas/RouteSerializer"
            },
            "type": "array"
          }
        },
        "required": [
          "receiver"
        ],
        "type": "object"
      },
      "ServiceKeysList": {
        "properties": {
          "credentialsInfo": {
            "additionalProperties": {
              "nullable": true,
              "type": "string"
            },
            "title": "Credentialsinfo",
            "type": "object"
          },
          "id": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Id",
            "type": "string"
          },
          "name": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Name",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "type": "object"
      },
      "Services": {
        "properties": {
          "instances": {
            "items": {
              "$ref": "#/components/schemas/Instance"
            },
            "type": "array"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "instances",
          "message"
        ],
        "type": "object"
      },
      "StaticConfigs": {
        "properties": {
          "labels": {
            "additionalProperties": {
              "minLength": 1,
              "type": "string"
            },
            "title": "Labels",
            "type": "object"
          },
          "targets": {
            "items": {
              "maxLength": 400,
              "minLength": 1,
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "targets"
        ],
        "type": "object"
      },
      "SystemInstance": {
        "properties": {
          "alertingUrl": {
            "minLength": 1,
            "title": "Alertingurl",
            "type": "string"
          },
          "instance": {
            "maxLength": 63,
            "minLength": 1,
            "title": "Instance",
            "type": "string"
          },
          "jaegerTracesUrl": {
            "minLength": 1,
            "title": "Jaegertracesurl",
            "type": "string"
          },
          "jaegerUiUrl": {
            "minLength": 1,
            "title": "Jaegeruiurl",
            "type": "string"
          },
          "logsPushUrl": {
            "minLength": 1,
            "title": "Logspushurl",
            "type": "string"
          },
          "logsUrl": {
            "minLength": 1,
            "title": "Logsurl",
            "type": "string"
          },
          "metricsUrl": {
            "minLength": 1,
            "title": "Metricsurl",
            "type": "string"
          },
          "name": {
            "default": "",
            "maxLength": 300,
            "title": "Name",
            "type": "string"
          },
          "otlpTracesUrl": {
            "minLength": 1,
            "title": "Otlptracesurl",
            "type": "string"
          },
          "pushMetricsUrl": {
            "minLength": 1,
            "title": "Pushmetricsurl",
            "type": "string"
          },
          "targetsUrl": {
            "minLength": 1,
            "title": "Targetsurl",
            "type": "string"
          },
          "zipkinSpansUrl": {
            "minLength": 1,
            "title": "Zipkinspansurl",
            "type": "string"
          }
        },
        "required": [
          "alertingUrl",
          "instance",
          "jaegerTracesUrl",
          "jaegerUiUrl",
          "logsPushUrl",
          "logsUrl",
          "metricsUrl",
          "otlpTracesUrl",
          "pushMetricsUrl",
          "targetsUrl",
          "zipkinSpansUrl"
        ],
        "type": "object"
      },
      "SystemInstanceModel": {
        "properties": {
          "instance": {
            "maxLength": 63,
            "minLength": 1,
            "title": "Instance",
            "type": "string"
          },
          "name": {
            "maxLength": 300,
            "minLength": 1,
            "title": "Name",
            "type": "string"
          }
        },
        "required": [
          "instance"
        ],
        "type": "object"
      },
      "SystemInstanceResponse": {
        "properties": {
          "instance": {
            "$ref": "#/components/schemas/SystemInstance"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "instance",
          "message"
        ],
        "type": "object"
      },
      "SystemProjectInstancesResponse": {
        "properties": {
          "instances": {
            "items": {
              "$ref": "#/components/schemas/SystemInstanceModel"
            },
            "type": "array"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "instances",
          "message"
        ],
        "type": "object"
      },
      "TLSConfig": {
        "properties": {
          "insecureSkipVerify": {
            "default": false,
            "title": "Insecureskipverify",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "TraceConfig": {
        "properties": {
          "retention": {
            "maxLength": 10,
            "minLength": 2,
            "title": "Retention",
            "type": "string"
          }
        },
        "required": [
          "retention"
        ],
        "type": "object"
      },
      "TracesConfigResponse": {
        "properties": {
          "config": {
            "$ref": "#/components/schemas/TraceConfig"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "config",
          "message"
        ],
        "type": "object"
      },
      "WebHook": {
        "properties": {
          "msTeams": {
            "default": false,
            "title": "Msteams",
            "type": "boolean"
          },
          "sendResolved": {
            "default": true,
            "title": "Sendresolved",
            "type": "boolean"
          },
          "url": {
            "maxLength": 500,
            "minLength": 1,
            "title": "Url",
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "CreateInstancePayload": {
        "description": "Create update instance body.",
        "properties": {
          "name": {
            "description": "Name of the service",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "parameter": {
            "description": "additional parameters",
            "type": "object"
          },
          "planId": {
            "description": "uuid of the plan to create/update",
            "type": "string"
          }
        },
        "required": [
          "planId"
        ],
        "type": "object"
      },
      "UpdateInstancePayload": {
        "description": "Create update instance body.",
        "properties": {
          "name": {
            "description": "Name of the service",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "parameter": {
            "description": "additional parameters",
            "type": "object"
          },
          "planId": {
            "description": "uuid of the plan to create/update",
            "type": "string"
          }
        },
        "required": [
          "planId"
        ],
        "type": "object"
      },
      "UpdateACLPayload": {
        "description": "List of cidr. Send empty string to remove acl.",
        "properties": {
          "acl": {
            "description": "list of cidr",
            "items": {
              "description": "cidr correct format",
              "maxLength": 100,
              "type": "string"
            },
            "maxLength": 20,
            "type": "array"
          }
        },
        "required": [
          "acl"
        ],
        "type": "object"
      },
      "UpdateAlertConfigsPayload": {
        "description": "Alert config",
        "properties": {
          "global": {
            "description": "Global config. If nothing passed the default argus config will be used.",
            "properties": {
              "opsgenieApiKey": {
                "description": "Opsgenie api key\n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9-",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "opsgenieApiUrl": {
                "description": "Opsgenie api url\n`Additional Validators:`\n* must be a syntactically valid url address",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "resolveTimeout": {
                "default": "5m",
                "description": "ResolveTimeout is the default value used by alertmanager if the alert does not include EndsAt, after this time passes it can declare the alert as resolved if it has not been updated. This has no impact on alerts from Prometheus, as they always include EndsAt. \n`Additional Validators:`\n* must be a valid time format",
                "maxLength": 8,
                "minLength": 2,
                "type": "string"
              },
              "smtpAuthIdentity": {
                "description": "Auth identity.\n`Additional Validators:`\n* must be a syntactically valid email address",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "smtpAuthPassword": {
                "description": "SMTP Auth using LOGIN and PLAIN.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "smtpAuthUsername": {
                "description": "SMTP Auth using CRAM-MD5, LOGIN and PLAIN. If empty, Alertmanager doesn't authenticate to the SMTP server.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "smtpFrom": {
                "description": "The default SMTP From header field. \n`Additional Validators:`\n* must be a syntactically valid email address",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "smtpSmarthost": {
                "description": "The default SMTP smarthost used for sending emails, including port number. Port number usually is 25, or 587 for SMTP over TLS (sometimes referred to as STARTTLS). Example: smtp.example.org:587 \n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9_./@\u0026?:-",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              }
            },
            "type": "object"
          },
          "inhibitRules": {
            "description": "A list of inhibition rules.",
            "properties": {
              "equal": {
                "description": "Labels that must have an equal value in the source and target alert for the inhibition to take effect.\n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9_./@\u0026?:-",
                "items": {
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                },
                "type": "array"
              },
              "sourceMatch": {
                "description": "map of key:value. Matchers for which one or more alerts have to exist for the inhibition to take effect.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not have more than 200 characters\n* each key and value should only include the characters: a-zA-Z0-9_./@\u0026?:-",
                "type": "object"
              },
              "sourceMatchRe": {
                "description": "map of key:value. Regex match\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not have more than 200 characters",
                "type": "object"
              },
              "targetMatch": {
                "description": "map of key:value. Matchers that have to be fulfilled in the alerts to be muted.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not have more than 200 characters\n* each key and value should only include the characters: a-zA-Z0-9_./@\u0026?:-",
                "type": "object"
              },
              "targetMatchRe": {
                "description": "map of key:value. Matchers that have to be fulfilled in the alerts to be muted. Regex.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not have more than 200 characters",
                "type": "object"
              }
            },
            "type": "object"
          },
          "receivers": {
            "description": "A list of notification receivers.",
            "items": {
              "description": "Receivers",
              "properties": {
                "emailConfigs": {
                  "description": "Email configurations",
                  "items": {
                    "properties": {
                      "authIdentity": {
                        "description": "SMTP authentication information.\n`Additional Validators:`\n* must be a syntactically valid email address",
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string"
                      },
                      "authPassword": {
                        "description": "SMTP authentication information.",
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string"
                      },
                      "authUsername": {
                        "description": "SMTP authentication information.",
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string"
                      },
                      "from": {
                        "description": "The sender address.\n`Additional Validators:`\n* must be a syntactically valid email address",
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string"
                      },
                      "smarthost": {
                        "description": "The SMTP host through which emails are sent.\n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9_./@\u0026?:-",
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string"
                      },
                      "to": {
                        "description": "The email address to send notifications to.\n`Additional Validators:`\n* must be a syntactically valid email address",
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "`Additional Validators:`\n* must be unique\n* should only include the characters: a-zA-Z0-9-",
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                },
                "opsgenieConfigs": {
                  "description": "Configuration for ops genie.",
                  "items": {
                    "properties": {
                      "apiKey": {
                        "description": "The API key to use when talking to the OpsGenie API.\n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9-",
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string"
                      },
                      "apiUrl": {
                        "description": "The host to send OpsGenie API requests to.\n`Additional Validators:`\n* must be a syntactically valid url address",
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string"
                      },
                      "tags": {
                        "description": "Comma separated list of tags attached to the notifications.",
                        "maxLength": 400,
                        "minLength": 1,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "webHookConfigs": {
                  "items": {
                    "properties": {
                      "msTeams": {
                        "default": false,
                        "description": "Microsoft Teams webhooks require special handling. If you set this property to true, it is treated as such",
                        "type": "boolean"
                      },
                      "url": {
                        "description": "The endpoint to send HTTP POST requests to.\n`Additional Validators:`\n* must be a syntactically valid url address",
                        "maxLength": 500,
                        "minLength": 1,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "route": {
            "description": "The root node of the routing tree.",
            "properties": {
              "groupBy": {
                "description": "The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.",
                "items": {
                  "description": "As described",
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                },
                "type": "array"
              },
              "groupInterval": {
                "default": "5m",
                "description": "How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)\n`Additional Validators:`\n* must be a valid time format",
                "maxLength": 8,
                "minLength": 2,
                "type": "string"
              },
              "groupWait": {
                "default": "30s",
                "description": "How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)\n`Additional Validators:`\n* must be a valid time format",
                "maxLength": 8,
                "minLength": 2,
                "type": "string"
              },
              "match": {
                "description": "map of key:value. A set of equality matchers an alert has to fulfill to match the node. \n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters\n* key and values should only include the characters: a-zA-Z0-9_./@\u0026?:-",
                "type": "object"
              },
              "matchRe": {
                "description": "map of key:value. A set of regex-matchers an alert has to fulfill to match the node. \n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                "type": "object"
              },
              "matchers": {
                "description": "A list of matchers that an alert has to fulfill to match the node. A matcher is a string with a syntax inspired by PromQL and OpenMetrics. The syntax of a matcher consists of three tokens:\n* A valid Prometheus label name.\n* One of =, !=, =~, or !~. = means equals, != means that the strings are not equal, =~ is used for equality of regex expressions and !~ is used for un-equality of regex expressions. They have the same meaning as known from PromQL selectors.\n* A UTF-8 string, which may be enclosed in double quotes. Before or after each token, there may be any amount of whitespace.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                "items": {
                  "description": "Item of matchers",
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                },
                "type": "array"
              },
              "receiver": {
                "description": "Receiver that should be one item of receivers\n`Additional Validators:`\n* must be a in name of receivers",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "repeatInterval": {
                "default": "4h",
                "description": "How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).\n`Additional Validators:`\n* must be a valid time format",
                "maxLength": 8,
                "minLength": 2,
                "type": "string"
              },
              "routes": {
                "description": "Zero or more child routes.",
                "items": {
                  "description": "As in one level above",
                  "properties": {
                    "groupBy": {
                      "items": {
                        "description": "As in one level above",
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "groupInterval": {
                      "description": "As in one level above",
                      "maxLength": 8,
                      "minLength": 2,
                      "type": "string"
                    },
                    "groupWait": {
                      "description": "As in one level above",
                      "maxLength": 8,
                      "type": "string"
                    },
                    "match": {
                      "description": "As in one level above",
                      "type": "object"
                    },
                    "matchRe": {
                      "description": "As in one level above",
                      "type": "object"
                    },
                    "receiver": {
                      "description": "As in one level above",
                      "maxLength": 100,
                      "minLength": 1,
                      "type": "string"
                    },
                    "repeatInterval": {
                      "description": "As in one level above",
                      "maxLength": 8,
                      "minLength": 2,
                      "type": "string"
                    },
                    "routes": {
                      "description": "Another child routes",
                      "items": {
                        "description": "As in one level above",
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "receiver"
            ],
            "type": "object"
          }
        },
        "required": [
          "receivers",
          "route"
        ],
        "type": "object"
      },
      "CreateAlertConfigReceiverPayload": {
        "description": "Receivers",
        "properties": {
          "emailConfigs": {
            "description": "Email configurations",
            "items": {
              "properties": {
                "authIdentity": {
                  "description": "SMTP authentication information.\n`Additional Validators:`\n* must be a syntactically valid email address",
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                },
                "authPassword": {
                  "description": "SMTP authentication information.",
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                },
                "authUsername": {
                  "description": "SMTP authentication information.",
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                },
                "from": {
                  "description": "The sender address.\n`Additional Validators:`\n* must be a syntactically valid email address",
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                },
                "smarthost": {
                  "description": "The SMTP host through which emails are sent.\n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9_./@\u0026?:-",
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                },
                "to": {
                  "description": "The email address to send notifications to.\n`Additional Validators:`\n* must be a syntactically valid email address",
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "name": {
            "description": "`Additional Validators:`\n* must be unique\n* should only include the characters: a-zA-Z0-9-",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "opsgenieConfigs": {
            "description": "Configuration for ops genie.",
            "items": {
              "properties": {
                "apiKey": {
                  "description": "The API key to use when talking to the OpsGenie API.\n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9-",
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                },
                "apiUrl": {
                  "description": "The host to send OpsGenie API requests to.\n`Additional Validators:`\n* must be a syntactically valid url address",
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                },
                "tags": {
                  "description": "Comma separated list of tags attached to the notifications.",
                  "maxLength": 400,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "webHookConfigs": {
            "items": {
              "properties": {
                "msTeams": {
                  "default": false,
                  "description": "Microsoft Teams webhooks require special handling. If you set this property to true, it is treated as such",
                  "type": "boolean"
                },
                "url": {
                  "description": "The endpoint to send HTTP POST requests to.\n`Additional Validators:`\n* must be a syntactically valid url address",
                  "maxLength": 500,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "UpdateAlertConfigReceiverPayload": {
        "description": "Receivers",
        "properties": {
          "emailConfigs": {
            "description": "Email configurations",
            "items": {
              "properties": {
                "authIdentity": {
                  "description": "SMTP authentication information.\n`Additional Validators:`\n* must be a syntactically valid email address",
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                },
                "authPassword": {
                  "description": "SMTP authentication information.",
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                },
                "authUsername": {
                  "description": "SMTP authentication information.",
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                },
                "from": {
                  "description": "The sender address.\n`Additional Validators:`\n* must be a syntactically valid email address",
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                },
                "smarthost": {
                  "description": "The SMTP host through which emails are sent.\n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9_./@\u0026?:-",
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                },
                "to": {
                  "description": "The email address to send notifications to.\n`Additional Validators:`\n* must be a syntactically valid email address",
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "name": {
            "description": "`Additional Validators:`\n* must be unique\n* should only include the characters: a-zA-Z0-9-",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "opsgenieConfigs": {
            "description": "Configuration for ops genie.",
            "items": {
              "properties": {
                "apiKey": {
                  "description": "The API key to use when talking to the OpsGenie API.\n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9-",
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                },
                "apiUrl": {
                  "description": "The host to send OpsGenie API requests to.\n`Additional Validators:`\n* must be a syntactically valid url address",
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                },
                "tags": {
                  "description": "Comma separated list of tags attached to the notifications.",
                  "maxLength": 400,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "webHookConfigs": {
            "items": {
              "properties": {
                "msTeams": {
                  "default": false,
                  "description": "Microsoft Teams webhooks require special handling. If you set this property to true, it is treated as such",
                  "type": "boolean"
                },
                "url": {
                  "description": "The endpoint to send HTTP POST requests to.\n`Additional Validators:`\n* must be a syntactically valid url address",
                  "maxLength": 500,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "CreateAlertConfigRoutePayload": {
        "description": "The root node of the routing tree.",
        "properties": {
          "groupBy": {
            "description": "The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.",
            "items": {
              "description": "As described",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            },
            "type": "array"
          },
          "groupInterval": {
            "default": "5m",
            "description": "How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)\n`Additional Validators:`\n* must be a valid time format",
            "maxLength": 8,
            "minLength": 2,
            "type": "string"
          },
          "groupWait": {
            "default": "30s",
            "description": "How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)\n`Additional Validators:`\n* must be a valid time format",
            "maxLength": 8,
            "minLength": 2,
            "type": "string"
          },
          "match": {
            "description": "map of key:value. A set of equality matchers an alert has to fulfill to match the node. \n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters\n* key and values should only include the characters: a-zA-Z0-9_./@\u0026?:-",
            "type": "object"
          },
          "matchRe": {
            "description": "map of key:value. A set of regex-matchers an alert has to fulfill to match the node. \n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
            "type": "object"
          },
          "matchers": {
            "description": "A list of matchers that an alert has to fulfill to match the node. A matcher is a string with a syntax inspired by PromQL and OpenMetrics. The syntax of a matcher consists of three tokens:\n* A valid Prometheus label name.\n* One of =, !=, =~, or !~. = means equals, != means that the strings are not equal, =~ is used for equality of regex expressions and !~ is used for un-equality of regex expressions. They have the same meaning as known from PromQL selectors.\n* A UTF-8 string, which may be enclosed in double quotes. Before or after each token, there may be any amount of whitespace.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
            "items": {
              "description": "Item of matchers",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            },
            "type": "array"
          },
          "receiver": {
            "description": "Receiver that should be one item of receivers\n`Additional Validators:`\n* must be a in name of receivers",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "repeatInterval": {
            "default": "4h",
            "description": "How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).\n`Additional Validators:`\n* must be a valid time format",
            "maxLength": 8,
            "minLength": 2,
            "type": "string"
          },
          "routes": {
            "description": "Zero or more child routes.",
            "items": {
              "description": "As in one level above",
              "properties": {
                "groupBy": {
                  "items": {
                    "description": "As in one level above",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "type": "array"
                },
                "groupInterval": {
                  "description": "As in one level above",
                  "maxLength": 8,
                  "minLength": 2,
                  "type": "string"
                },
                "groupWait": {
                  "description": "As in one level above",
                  "maxLength": 8,
                  "type": "string"
                },
                "match": {
                  "description": "As in one level above",
                  "type": "object"
                },
                "matchRe": {
                  "description": "As in one level above",
                  "type": "object"
                },
                "receiver": {
                  "description": "As in one level above",
                  "maxLength": 100,
                  "minLength": 1,
                  "type": "string"
                },
                "repeatInterval": {
                  "description": "As in one level above",
                  "maxLength": 8,
                  "minLength": 2,
                  "type": "string"
                },
                "routes": {
                  "description": "Another child routes",
                  "items": {
                    "description": "As in one level above",
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "receiver"
        ],
        "type": "object"
      },
      "UpdateAlertConfigRoutePayload": {
        "description": "The root node of the routing tree.",
        "properties": {
          "groupBy": {
            "description": "The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.",
            "items": {
              "description": "As described",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            },
            "type": "array"
          },
          "groupInterval": {
            "default": "5m",
            "description": "How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)\n`Additional Validators:`\n* must be a valid time format",
            "maxLength": 8,
            "minLength": 2,
            "type": "string"
          },
          "groupWait": {
            "default": "30s",
            "description": "How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)\n`Additional Validators:`\n* must be a valid time format",
            "maxLength": 8,
            "minLength": 2,
            "type": "string"
          },
          "match": {
            "description": "map of key:value. A set of equality matchers an alert has to fulfill to match the node. \n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters\n* key and values should only include the characters: a-zA-Z0-9_./@\u0026?:-",
            "type": "object"
          },
          "matchRe": {
            "description": "map of key:value. A set of regex-matchers an alert has to fulfill to match the node. \n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
            "type": "object"
          },
          "matchers": {
            "description": "A list of matchers that an alert has to fulfill to match the node. A matcher is a string with a syntax inspired by PromQL and OpenMetrics. The syntax of a matcher consists of three tokens:\n* A valid Prometheus label name.\n* One of =, !=, =~, or !~. = means equals, != means that the strings are not equal, =~ is used for equality of regex expressions and !~ is used for un-equality of regex expressions. They have the same meaning as known from PromQL selectors.\n* A UTF-8 string, which may be enclosed in double quotes. Before or after each token, there may be any amount of whitespace.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
            "items": {
              "description": "Item of matchers",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            },
            "type": "array"
          },
          "receiver": {
            "description": "Receiver that should be one item of receivers\n`Additional Validators:`\n* must be a in name of receivers",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "repeatInterval": {
            "default": "4h",
            "description": "How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).\n`Additional Validators:`\n* must be a valid time format",
            "maxLength": 8,
            "minLength": 2,
            "type": "string"
          },
          "routes": {
            "description": "Zero or more child routes.",
            "items": {
              "description": "As in one level above",
              "properties": {
                "groupBy": {
                  "items": {
                    "description": "As in one level above",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "type": "array"
                },
                "groupInterval": {
                  "description": "As in one level above",
                  "maxLength": 8,
                  "minLength": 2,
                  "type": "string"
                },
                "groupWait": {
                  "description": "As in one level above",
                  "maxLength": 8,
                  "type": "string"
                },
                "match": {
                  "description": "As in one level above",
                  "type": "object"
                },
                "matchRe": {
                  "description": "As in one level above",
                  "type": "object"
                },
                "receiver": {
                  "description": "As in one level above",
                  "maxLength": 100,
                  "minLength": 1,
                  "type": "string"
                },
                "repeatInterval": {
                  "description": "As in one level above",
                  "maxLength": 8,
                  "minLength": 2,
                  "type": "string"
                },
                "routes": {
                  "description": "Another child routes",
                  "items": {
                    "description": "As in one level above",
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "receiver"
        ],
        "type": "object"
      },
      "UpdateCredentialsRemoteWriteConfigPayload": {
        "description": "Remote write limit config.",
        "properties": {
          "maxLimit": {
            "description": "Remote write metric sample limit for credential to push in a single minute.",
            "type": "number"
          }
        },
        "type": "object"
      },
      "UpdateGrafanaConfigsPayload": {
        "description": "Sending any of the attributes results in a set of the attribute and overwrites any previous configuration.",
        "properties": {
          "genericOauth": {
            "properties": {
              "apiUrl": {
                "description": "Set api_url to the resource that returns OpenID UserInfo compatible information.",
                "type": "string"
              },
              "authUrl": {
                "description": "Authentication endpoint of idp.",
                "type": "string"
              },
              "enabled": {
                "description": "enable or disable generic oauth login",
                "type": "boolean"
              },
              "name": {
                "description": "Display name for the oAuth provider",
                "type": "string"
              },
              "oauthClientId": {
                "description": "Oauth client id for auth endpoint.",
                "type": "string"
              },
              "oauthClientSecret": {
                "description": "Oauth client secret for auth endpoint.",
                "type": "string"
              },
              "roleAttributePath": {
                "description": "Grafana checks for the presence of a role using the JMESPath specified via the role_attribute_path configuration option. The JMESPath is applied to the id_token first. If there is no match, then the UserInfo endpoint specified via the api_url configuration option is tried next. The result after evaluation of the role_attribute_path JMESPath expression should be a valid Grafana role, for example, Viewer, Editor or Admin\nFor example: contains(roles[\\*], 'grafana-admin') \u0026\u0026 'Admin' || contains(roles[\\*], 'grafana-editor') \u0026\u0026 'Editor' || contains(roles[\\*], 'grafana-viewer') \u0026\u0026 'Viewer'",
                "type": "string"
              },
              "roleAttributeStrict": {
                "default": true,
                "description": "If  therole_attribute_path property does not return a role, then the user is assigned the Viewer role by default. You can disable the role assignment by setting role_attribute_strict = true. It denies user access if no role or an invalid role is returned.",
                "type": "boolean"
              },
              "scopes": {
                "default": "openid profile email",
                "description": "Space seperated list of scopes of the token",
                "type": "string"
              },
              "tokenUrl": {
                "description": "Token endpoint of the idp.",
                "type": "string"
              },
              "usePkce": {
                "description": "enable or disable Proof Key for Code Exchange",
                "type": "boolean"
              }
            },
            "required": [
              "apiUrl",
              "authUrl",
              "enabled",
              "oauthClientId",
              "oauthClientSecret",
              "roleAttributePath",
              "tokenUrl"
            ],
            "type": "object"
          },
          "publicReadAccess": {
            "description": "If it's true, anyone can access the Grafana dashboards without logging in. If it is wrong, a login is required.",
            "type": "boolean"
          },
          "useStackitSso": {
            "description": "If it's true, it overwrites the current genericOauth config and configures STACKIT SSO for this instance.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "CreateScrapeConfigPayload": {
        "properties": {
          "basicAuth": {
            "description": "Sets the 'Authorization' header on every scrape request with the configured username and password.\n`Additional Validators:`\n* if basicAuth is in the body no other authentication method should be in the body",
            "properties": {
              "password": {
                "description": "password",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "username": {
                "description": "username",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              }
            },
            "type": "object"
          },
          "bearerToken": {
            "description": "Sets the 'Authorization' header on every scrape request with the configured bearer token. It is mutually exclusive with 'bearer_token_file'.\n`Additional Validators:`\n* needs to be a valid bearer token\n* if bearerToken is in the body no other authentication method should be in the body",
            "type": "string"
          },
          "honorLabels": {
            "default": false,
            "description": "Note that any globally configured 'external_labels' are unaffected by this setting. In communication with external systems, they are always applied only when a time series does not have a given label yet and are ignored otherwise.",
            "type": "boolean"
          },
          "honorTimeStamps": {
            "default": false,
            "description": "honor_timestamps controls whether Prometheus respects the timestamps present in scraped data. If honor_timestamps is set to 'true', the timestamps of the metrics exposed by the target will be used.",
            "type": "boolean"
          },
          "httpSdConfigs": {
            "description": "HTTP-based service discovery provides a more generic way to configure static targets and serves as an interface to plug in custom service discovery mechanisms.",
            "items": {
              "properties": {
                "basicAuth": {
                  "description": "Sets the 'Authorization' header on every scrape request with the configured username and password.\n`Additional Validators:`\n* if basicAuth is in the body no other authentication method should be in the body",
                  "properties": {
                    "password": {
                      "description": "password",
                      "maxLength": 200,
                      "minLength": 1,
                      "type": "string"
                    },
                    "username": {
                      "description": "username",
                      "maxLength": 200,
                      "minLength": 1,
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "oauth2": {
                  "description": "OAuth 2.0 authentication using the client credentials grant type. Prometheus fetches an access token from the specified endpoint with the given client access and secret keys.\n`Additional Validators:`\n* if oauth2 is in the body no other authentication method should be in the body",
                  "properties": {
                    "clientId": {
                      "description": "clientId",
                      "maxLength": 200,
                      "minLength": 1,
                      "type": "string"
                    },
                    "clientSecret": {
                      "description": "clientSecret",
                      "maxLength": 200,
                      "minLength": 1,
                      "type": "string"
                    },
                    "scopes": {
                      "description": "The URL to fetch the token from.",
                      "items": {
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "tlsConfig": {
                      "description": "Configures the scrape request's TLS settings.",
                      "properties": {
                        "insecureSkipVerify": {
                          "default": false,
                          "description": "Disable validation of the server certificate.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "tokenUrl": {
                      "description": "The URL to fetch the token from.",
                      "maxLength": 200,
                      "minLength": 1,
                      "type": "string"
                    }
                  },
                  "required": [
                    "clientId",
                    "clientSecret",
                    "tokenUrl"
                  ],
                  "type": "object"
                },
                "refreshInterval": {
                  "default": "60s",
                  "description": "Refresh interval to re-query the endpoint. E.g. 60s\n`Additional Validators:`\n* must be a valid time format* must be \u003e= 60s",
                  "maxLength": 8,
                  "minLength": 2,
                  "type": "string"
                },
                "tlsConfig": {
                  "description": "Configures the scrape request's TLS settings.",
                  "properties": {
                    "insecureSkipVerify": {
                      "default": false,
                      "description": "Disable validation of the server certificate.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "url": {
                  "description": "URL from which the targets are fetched.",
                  "maxLength": 400,
                  "type": "string"
                }
              },
              "required": [
                "url"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "jobName": {
            "description": "The job name assigned to scraped metrics by default.\n`Additional Validators:`\n* must be unique\n* key and values should only include the characters: a-zA-Z0-9-",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "metricsPath": {
            "default": "/metrics",
            "description": "The HTTP resource path on which to fetch metrics from targets. E.g. /metrics",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "metricsRelabelConfigs": {
            "description": "List of metric relabel configurations",
            "items": {
              "properties": {
                "action": {
                  "default": "replace",
                  "description": "Action to perform based on regex matching.\n`Additional Validators:`\n* if action is replace, targetLabel needs to be in body",
                  "enum": [
                    "replace",
                    "keep",
                    "drop",
                    "hashmod",
                    "labelmap",
                    "labeldrop",
                    "labelkeep"
                  ],
                  "type": "string"
                },
                "modulus": {
                  "description": "Modulus to take of the hash of the source label values.",
                  "type": "number"
                },
                "regex": {
                  "default": ".*",
                  "description": "Regular expression against which the extracted value is matched.",
                  "maxLength": 400,
                  "minLength": 1,
                  "type": "string"
                },
                "replacement": {
                  "default": "$1",
                  "description": "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available.",
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                },
                "separator": {
                  "default": ";",
                  "description": "Separator placed between concatenated source label values.",
                  "maxLength": 20,
                  "minLength": 1,
                  "type": "string"
                },
                "sourceLabels": {
                  "description": "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
                  "items": {
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "type": "array"
                },
                "targetLabel": {
                  "description": "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "oauth2": {
            "description": "OAuth 2.0 authentication using the client credentials grant type. Prometheus fetches an access token from the specified endpoint with the given client access and secret keys.\n`Additional Validators:`\n* if oauth2 is in the body no other authentication method should be in the body",
            "properties": {
              "clientId": {
                "description": "clientId",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "clientSecret": {
                "description": "clientSecret",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "scopes": {
                "description": "The URL to fetch the token from.",
                "items": {
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                },
                "type": "array"
              },
              "tlsConfig": {
                "description": "Configures the scrape request's TLS settings.",
                "properties": {
                  "insecureSkipVerify": {
                    "default": false,
                    "description": "Disable validation of the server certificate.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "tokenUrl": {
                "description": "The URL to fetch the token from.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              }
            },
            "required": [
              "clientId",
              "clientSecret",
              "tokenUrl"
            ],
            "type": "object"
          },
          "params": {
            "description": "Optional http params\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not have more than 200 characters",
            "type": "object"
          },
          "sampleLimit": {
            "description": "Per-scrape limit on number of scraped samples that will be accepted. If more than this number of samples are present after metric relabeling the entire scrape will be treated as failed. The total limit depends on the service plan target limits * samples",
            "type": "number"
          },
          "scheme": {
            "description": "Configures the protocol scheme used for requests. https or http",
            "enum": [
              "http",
              "https"
            ],
            "type": "string"
          },
          "scrapeInterval": {
            "description": "How frequently to scrape targets from this job. E.g. 5m\n`Additional Validators:`\n* must be a valid time format* must be \u003e= 60s",
            "maxLength": 8,
            "minLength": 2,
            "type": "string"
          },
          "scrapeTimeout": {
            "description": "Per-scrape timeout when scraping this job.\n`Additional Validators:`\n* must be a valid time format* must be smaller than scrapeInterval",
            "maxLength": 8,
            "minLength": 2,
            "type": "string"
          },
          "staticConfigs": {
            "description": "A list of scrape configurations.",
            "items": {
              "properties": {
                "labels": {
                  "description": "Labels assigned to all metrics scraped from the targets.\n`Additional Validators:`\n* should not contain more than 10 keys\n* each key and value should not be longer than 200 characters",
                  "type": "object"
                },
                "targets": {
                  "description": "The targets specified by the static config.",
                  "items": {
                    "maxLength": 500,
                    "minLength": 1,
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "targets"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "tlsConfig": {
            "description": "Configures the scrape request's TLS settings.",
            "properties": {
              "insecureSkipVerify": {
                "default": false,
                "description": "Disable validation of the server certificate.",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "jobName",
          "scheme",
          "scrapeInterval",
          "scrapeTimeout",
          "staticConfigs"
        ],
        "type": "object"
      },
      "UpdateScrapeConfigPayload": {
        "properties": {
          "basicAuth": {
            "description": "Sets the 'Authorization' header on every scrape request with the configured username and password.\n`Additional Validators:`\n* if basicAuth is in the body no other authentication method should be in the body",
            "properties": {
              "password": {
                "description": "password",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "username": {
                "description": "username",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              }
            },
            "type": "object"
          },
          "bearerToken": {
            "description": "Sets the 'Authorization' header on every scrape request with the configured bearer token. It is mutually exclusive with 'bearer_token_file'.\n`Additional Validators:`\n* needs to be a valid bearer token\n* if bearerToken is in the body no other authentication method should be in the body",
            "type": "string"
          },
          "honorLabels": {
            "default": false,
            "description": "Note that any globally configured 'external_labels' are unaffected by this setting. In communication with external systems, they are always applied only when a time series does not have a given label yet and are ignored otherwise.",
            "type": "boolean"
          },
          "honorTimeStamps": {
            "default": false,
            "description": "honor_timestamps controls whether Prometheus respects the timestamps present in scraped data. If honor_timestamps is set to 'true', the timestamps of the metrics exposed by the target will be used.",
            "type": "boolean"
          },
          "metricsPath": {
            "default": "/metrics",
            "description": "The HTTP resource path on which to fetch metrics from targets. E.g. /metrics",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "metricsRelabelConfigs": {
            "description": "List of metric relabel configurations",
            "items": {
              "properties": {
                "action": {
                  "default": "replace",
                  "description": "Action to perform based on regex matching.\n`Additional Validators:`\n* if action is replace, targetLabel needs to be in body",
                  "enum": [
                    "replace",
                    "keep",
                    "drop",
                    "hashmod",
                    "labelmap",
                    "labeldrop",
                    "labelkeep"
                  ],
                  "type": "string"
                },
                "modulus": {
                  "description": "Modulus to take of the hash of the source label values.",
                  "type": "number"
                },
                "regex": {
                  "default": ".*",
                  "description": "Regular expression against which the extracted value is matched.",
                  "maxLength": 400,
                  "minLength": 1,
                  "type": "string"
                },
                "replacement": {
                  "default": "$1",
                  "description": "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available.",
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                },
                "separator": {
                  "default": ";",
                  "description": "Separator placed between concatenated source label values.",
                  "maxLength": 20,
                  "minLength": 1,
                  "type": "string"
                },
                "sourceLabels": {
                  "description": "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
                  "items": {
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "type": "array"
                },
                "targetLabel": {
                  "description": "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "params": {
            "description": "Optional http params\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not have more than 200 characters",
            "type": "object"
          },
          "sampleLimit": {
            "description": "Per-scrape limit on number of scraped samples that will be accepted. If more than this number of samples are present after metric relabeling the entire scrape will be treated as failed. The total limit depends on the service plan target limits * samples",
            "type": "number"
          },
          "scheme": {
            "description": "Configures the protocol scheme used for requests. https or http",
            "enum": [
              "http",
              "https"
            ],
            "type": "string"
          },
          "scrapeInterval": {
            "description": "How frequently to scrape targets from this job. E.g. 5m\n`Additional Validators:`\n* must be a valid time format* must be \u003e= 60s",
            "maxLength": 8,
            "minLength": 2,
            "type": "string"
          },
          "scrapeTimeout": {
            "description": "Per-scrape timeout when scraping this job.\n`Additional Validators:`\n* must be a valid time format* must be smaller than scrapeInterval",
            "maxLength": 8,
            "minLength": 2,
            "type": "string"
          },
          "staticConfigs": {
            "description": "A list of scrape configurations.",
            "items": {
              "properties": {
                "labels": {
                  "description": "Labels assigned to all metrics scraped from the targets.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                  "type": "object"
                },
                "targets": {
                  "description": "The targets specified by the static config.",
                  "items": {
                    "maxLength": 500,
                    "minLength": 1,
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "targets"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "tlsConfig": {
            "description": "Configures the scrape request's TLS settings.",
            "properties": {
              "insecureSkipVerify": {
                "default": false,
                "description": "Disable validation of the server certificate.",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "metricsPath",
          "scheme",
          "scrapeInterval",
          "scrapeTimeout",
          "staticConfigs"
        ],
        "type": "object"
      },
      "ListACLResponse": {
        "properties": {
          "acl": {
            "items": {
              "maxLength": 100,
              "minLength": 1,
              "type": "string"
            },
            "type": "array"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "message",
          "acl"
        ],
        "type": "object"
      },
      "AlertGroup": {
        "properties": {
          "interval": {
            "default": "60s",
            "maxLength": 8,
            "minLength": 2,
            "title": "Interval",
            "type": "string"
          },
          "name": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Name",
            "type": "string"
          },
          "rules": {
            "items": {
              "$ref": "#/components/schemas/AlertRuleRecord"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "rules"
        ],
        "type": "object"
      },
      "AlertRuleRecord": {
        "properties": {
          "alert": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Alert",
            "type": "string"
          },
          "annotations": {
            "additionalProperties": {
              "minLength": 1,
              "type": "string"
            },
            "title": "Annotations",
            "type": "object"
          },
          "expr": {
            "maxLength": 600,
            "minLength": 1,
            "title": "Expr",
            "type": "string"
          },
          "for": {
            "maxLength": 8,
            "minLength": 2,
            "title": "For",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "minLength": 1,
              "type": "string"
            },
            "title": "Labels",
            "type": "object"
          },
          "record": {
            "maxLength": 300,
            "minLength": 1,
            "title": "Record",
            "type": "string"
          }
        },
        "required": [
          "expr"
        ],
        "type": "object"
      },
      "CreateCredentialsResponse": {
        "properties": {
          "credentials": {
            "$ref": "#/components/schemas/Credentials"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "credentials",
          "message"
        ],
        "type": "object"
      },
      "BackupSchedule": {
        "properties": {
          "schedule": {
            "maxLength": 100,
            "minLength": 1,
            "title": "Schedule",
            "type": "string"
          },
          "scheduleId": {
            "format": "uuid",
            "title": "Scheduleid",
            "type": "string"
          }
        },
        "required": [
          "schedule",
          "scheduleId"
        ],
        "type": "object"
      },
      "ScrapeConfigsResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Job"
            },
            "type": "array"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "data",
          "message"
        ],
        "type": "object"
      },
      "ListCredentialsResponse": {
        "properties": {
          "credentials": {
            "items": {
              "$ref": "#/components/schemas/ServiceKeysList"
            },
            "type": "array"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "credentials",
          "message"
        ],
        "type": "object"
      },
      "CredentialsRemoteWriteConfig": {
        "properties": {
          "credentialsMaxLimit": {
            "maximum": 6000000,
            "minimum": 0,
            "title": "Credentialsmaxlimit",
            "type": "integer"
          },
          "maxLimit": {
            "maximum": 6000000,
            "minimum": 0,
            "title": "Maxlimit",
            "type": "integer"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "credentialsMaxLimit",
          "maxLimit",
          "message"
        ],
        "type": "object"
      },
      "DeleteScrapeConfigResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Job"
            },
            "type": "array"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "data",
          "message"
        ],
        "type": "object"
      },
      "GetAlertConfigsResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Alert"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "data",
          "message"
        ],
        "type": "object"
      },
      "ListScrapeConfigsResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Job"
            },
            "type": "array"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "data",
          "message"
        ],
        "type": "object"
      },
      "GetScrapeConfigResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Job"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "data",
          "message"
        ],
        "type": "object"
      },
      "GrafanaConfigs": {
        "properties": {
          "genericOauth": {
            "$ref": "#/components/schemas/GrafanaOauth"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          },
          "publicReadAccess": {
            "title": "Publicreadaccess",
            "type": "boolean"
          },
          "useStackitSso": {
            "title": "Usestackitsso",
            "type": "boolean"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "MySQLCheckChildResponse": {
        "properties": {
          "id": {
            "minLength": 1,
            "title": "Id",
            "type": "string"
          },
          "server": {
            "minLength": 1,
            "title": "Server",
            "type": "string"
          }
        },
        "required": [
          "server",
          "id"
        ],
        "type": "object"
      },
      "PlansResponse": {
        "properties": {
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          },
          "plans": {
            "items": {
              "$ref": "#/components/schemas/Plan"
            },
            "type": "array"
          }
        },
        "required": [
          "message",
          "plans"
        ],
        "type": "object"
      },
      "Plan": {
        "properties": {
          "alertMatchers": {
            "title": "Alertmatchers",
            "type": "integer"
          },
          "alertReceivers": {
            "title": "Alertreceivers",
            "type": "integer"
          },
          "alertRules": {
            "title": "Alertrules",
            "type": "integer"
          },
          "amount": {
            "maximum": 10000000,
            "minimum": 0,
            "title": "Amount",
            "type": "number"
          },
          "bucketSize": {
            "minimum": 20,
            "title": "Bucketsize",
            "type": "integer"
          },
          "description": {
            "maxLength": 1000,
            "minLength": 1,
            "title": "Description",
            "type": "string"
          },
          "grafanaGlobalDashboards": {
            "title": "Grafanaglobaldashboards",
            "type": "integer"
          },
          "grafanaGlobalOrgs": {
            "title": "Grafanaglobalorgs",
            "type": "integer"
          },
          "grafanaGlobalSessions": {
            "title": "Grafanaglobalsessions",
            "type": "integer"
          },
          "grafanaGlobalUsers": {
            "title": "Grafanaglobalusers",
            "type": "integer"
          },
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "isFree": {
            "default": false,
            "title": "Isfree",
            "type": "boolean"
          },
          "isPublic": {
            "default": true,
            "title": "Ispublic",
            "type": "boolean"
          },
          "logsAlert": {
            "title": "Logsalert",
            "type": "integer"
          },
          "logsStorage": {
            "title": "Logsstorage",
            "type": "integer"
          },
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "title": "Name",
            "type": "string"
          },
          "planId": {
            "format": "uuid",
            "title": "Planid",
            "type": "string"
          },
          "samplesPerScrape": {
            "title": "Samplesperscrape",
            "type": "integer"
          },
          "schema": {
            "default": "",
            "maxLength": 500,
            "title": "Schema",
            "type": "string"
          },
          "targetNumber": {
            "title": "Targetnumber",
            "type": "integer"
          },
          "totalMetricSamples": {
            "title": "Totalmetricsamples",
            "type": "integer"
          },
          "tracesStorage": {
            "title": "Tracesstorage",
            "type": "integer"
          }
        },
        "required": [
          "alertMatchers",
          "alertReceivers",
          "alertRules",
          "bucketSize",
          "grafanaGlobalDashboards",
          "grafanaGlobalOrgs",
          "grafanaGlobalSessions",
          "grafanaGlobalUsers",
          "id",
          "logsAlert",
          "logsStorage",
          "planId",
          "samplesPerScrape",
          "targetNumber",
          "totalMetricSamples",
          "tracesStorage"
        ],
        "type": "object"
      },
      "ListInstancesResponse": {
        "properties": {
          "instances": {
            "items": {
              "$ref": "#/components/schemas/ProjectInstanceFull"
            },
            "type": "array"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "instances",
          "message"
        ],
        "type": "object"
      },
      "GetInstanceResponse": {
        "properties": {
          "dashboardUrl": {
            "maxLength": 500,
            "minLength": 1,
            "title": "Dashboardurl",
            "type": "string"
          },
          "error": {
            "maxLength": 200,
            "minLength": 1,
            "nullable": true,
            "title": "Error",
            "type": "string"
          },
          "id": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Id",
            "type": "string"
          },
          "instance": {
            "$ref": "#/components/schemas/InstanceSensitiveData"
          },
          "isUpdatable": {
            "default": true,
            "title": "Isupdatable",
            "type": "boolean"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          },
          "name": {
            "maxLength": 300,
            "minLength": 1,
            "title": "Name",
            "type": "string"
          },
          "parameters": {
            "additionalProperties": {
              "nullable": true,
              "type": "string"
            },
            "title": "Parameters",
            "type": "object"
          },
          "planId": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Planid",
            "type": "string"
          },
          "planName": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Planname",
            "type": "string"
          },
          "planSchema": {
            "default": "",
            "maxLength": 200,
            "title": "Planschema",
            "type": "string"
          },
          "serviceName": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Servicename",
            "type": "string"
          },
          "status": {
            "enum": [
              "CREATING",
              "CREATE_SUCCEEDED",
              "CREATE_FAILED",
              "DELETING",
              "DELETE_SUCCEEDED",
              "DELETE_FAILED",
              "UPDATING",
              "UPDATE_SUCCEEDED",
              "UPDATE_FAILED"
            ],
            "title": "Status",
            "type": "string"
          }
        },
        "required": [
          "dashboardUrl",
          "id",
          "instance",
          "message",
          "planId",
          "planName",
          "serviceName",
          "status"
        ],
        "type": "object"
      },
      "CreateInstanceResponse": {
        "properties": {
          "dashboardUrl": {
            "minLength": 1,
            "title": "Dashboardurl",
            "type": "string"
          },
          "instanceId": {
            "minLength": 1,
            "title": "Instanceid",
            "type": "string"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "dashboardUrl",
          "instanceId",
          "message"
        ],
        "type": "object"
      },
      "InstanceResponse": {
        "properties": {
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "UpdateAlertConfigsResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Alert"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "data",
          "message"
        ],
        "type": "object"
      },
      "AlertConfigReceiversResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Receivers"
            },
            "type": "array"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "data",
          "message"
        ],
        "type": "object"
      },
      "Receiver": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Receivers"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "data",
          "message"
        ],
        "type": "object"
      },
      "AlertConfigRouteResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Route"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "data",
          "message"
        ],
        "type": "object"
      },
      "RouteSerializer": {
        "properties": {
          "continue": {
            "default": false,
            "title": "Continue",
            "type": "boolean"
          },
          "groupBy": {
            "items": {
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            },
            "maxItems": 5,
            "type": "array"
          },
          "groupInterval": {
            "default": "5m",
            "maxLength": 8,
            "minLength": 2,
            "title": "Groupinterval",
            "type": "string"
          },
          "groupWait": {
            "default": "30s",
            "maxLength": 8,
            "minLength": 2,
            "title": "Groupwait",
            "type": "string"
          },
          "match": {
            "additionalProperties": {
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            },
            "title": "Match",
            "type": "object"
          },
          "matchRe": {
            "additionalProperties": {
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            },
            "title": "Matchre",
            "type": "object"
          },
          "matchers": {
            "items": {
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            },
            "maxItems": 5,
            "type": "array"
          },
          "receiver": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Receiver",
            "type": "string"
          },
          "repeatInterval": {
            "default": "4h",
            "maxLength": 8,
            "minLength": 2,
            "title": "Repeatinterval",
            "type": "string"
          },
          "routes": {
            "items": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "receiver"
        ],
        "type": "object"
      },
      "GetCredentialsResponse": {
        "properties": {
          "credentialsInfo": {
            "additionalProperties": {
              "nullable": true,
              "type": "string"
            },
            "title": "Credentialsinfo",
            "type": "object"
          },
          "id": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Id",
            "type": "string"
          },
          "message": {
            "minLength": 1,
            "title": "Message",
            "type": "string"
          },
          "name": {
            "maxLength": 200,
            "minLength": 1,
            "title": "Name",
            "type": "string"
          }
        },
        "required": [
          "id",
          "message",
          "name"
        ],
        "type": "object"
      }
    }
  },
  "info": {
    "contact": {
      "email": "stackit-argus@mail.schwarz"
    },
    "description": "API endpoints for Argus on STACKIT",
    "termsOfService": "https://stackit.de/en/imprint",
    "title": "STACKIT Argus API",
    "version": "1.1.0"
  },
  "openapi": "3.0.1",
  "paths": {
    "/v1/projects/{projectId}/instances": {
      "get": {
        "description": "Get all instances for a project.",
        "operationId": "ListInstances",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "instances": [
                    {
                      "id": "test-awesome",
                      "instance": "9449de83-64ac-45dc-9967-e7c75bbdca70",
                      "name": "testing",
                      "planName": "Observability-Basic-EU01",
                      "serviceName": "STACKIT Argus",
                      "status": "CREATE_SUCCEEDED"
                    }
                  ],
                  "message": "Successfully got instances"
                },
                "schema": {
                  "$ref": "#/components/schemas/ListInstancesResponse"
                }
              }
            },
            "description": "Get all instances for a project"
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You do not have permission to perform this action."
          }
        }
      },
      "post": {
        "description": "Create new instance.",
        "operationId": "CreateInstance",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInstancePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "example": {
                  "dashboardUrl": "https://portal-dev.stackit.cloud/projects/775eee9d-8565-48ab-9dcc-64a6ca55043a/service/597976c4-d4c1-44d6-9f43-213df3da1799/argus-dashboard/instances/597976c4-d4c1-44d6-9f43-213df3da1799/overview",
                  "instanceId": "597976c4-d4c1-44d6-9f43-213df3da1799",
                  "message": "Successfully created instance"
                },
                "schema": {
                  "$ref": "#/components/schemas/CreateInstanceResponse"
                }
              }
            },
            "description": "Create instance in project."
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "json body is not valid"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Something went wrong."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You do not have permission to perform this action."
          }
        }
      }
    },
    "/v1/projects/{projectId}/instances/{instanceId}": {
      "delete": {
        "description": "Delete instance.",
        "operationId": "DeleteInstance",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Successfully deleted instance"
                },
                "schema": {
                  "$ref": "#/components/schemas/InstanceResponse"
                }
              }
            },
            "description": "Delete instance in project."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You do not have permission to perform this action."
          }
        }
      },
      "get": {
        "description": "Get instance information.",
        "operationId": "GetInstance",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "dashboardUrl": "https://portal-dev.stackit.cloud/projects/775eee9d-8565-48ab-9dcc-64a6ca55043a/service/9449de83-64ac-45dc-9967-e7c75bbdca70/argus-dashboard/instances/9449de83-64ac-45dc-9967-e7c75bbdca70/overview",
                  "id": "9449de83-64ac-45dc-9967-e7c75bbdca70",
                  "instance": {
                    "alertingUrl": "https://alerting.stackit.argus.eu01.cloud/instances/9449de83-64ac-45dc-9967-e7c75bbdca70",
                    "cluster": "stackit",
                    "dashboardUrl": "dashboard.example.com",
                    "grafanaAdminPassword": "asdf313kles23450des0asdf313kles2",
                    "grafanaAdminUser": "admin",
                    "grafanaPlugins": [],
                    "grafanaPublicReadAccess": false,
                    "grafanaUrl": "https://ui.stackit.argus.eu01.cloud/instances/9449de83-64ac-45dc-9967-e7c75bbdca70",
                    "grafanaUseStackitSso": false,
                    "instance": "9449de83-64ac-45dc-9967-e7c75bbdca70",
                    "jaegerTracesUrl": "9449de83-64ac-gj.traces.stackit.argus.eu01.cloud:443",
                    "jaegerUiUrl": "https://9449de83-64ac-jui.traces.stackit.argus.eu01.cloud/instances/9449de83-64ac-45dc-9967-e7c75bbdca70",
                    "logsPushUrl": "https://logs.stackit.argus.eu01.cloud/instances/9449de83-64ac-45dc-9967-e7c75bbdca70/loki/api/v1/push",
                    "logsUrl": "https://logs.stackit.argus.eu01.cloud/instances/9449de83-64ac-45dc-9967-e7c75bbdca70",
                    "metricsRetentionTime1h": 0,
                    "metricsRetentionTime5m": 0,
                    "metricsRetentionTimeRaw": 14,
                    "metricsUrl": "https://storage.api.stackit.argus.eu01.cloud/instances/9449de83-64ac-45dc-9967-e7c75bbdca70",
                    "name": "test",
                    "otlpTracesUrl": "9449de83-64ac-op.traces.stackit.argus.eu01.cloud:443",
                    "plan": {
                      "alertMatchers": 10,
                      "alertReceivers": 10,
                      "alertRules": 1000,
                      "amount": 49,
                      "bucketSize": 20,
                      "description": "Small Plan",
                      "grafanaGlobalDashboards": 20,
                      "grafanaGlobalOrgs": 2,
                      "grafanaGlobalSessions": 10,
                      "grafanaGlobalUsers": 10,
                      "id": "7b1fbd9c-9acd-42ce-95d3-0f6822d6cabe",
                      "isFree": false,
                      "isPublic": true,
                      "logsAlert": 20,
                      "logsStorage": 20,
                      "name": "SmallPlan",
                      "planId": "7b1fbd9c-9acd-42ce-95d3-0f6822d6cabe",
                      "samplesPerScrape": 0,
                      "schema": "",
                      "targetNumber": 2,
                      "totalMetricSamples": 5000,
                      "tracesStorage": 20
                    },
                    "pushMetricsUrl": "https://push.metrics.stackit.argus.eu01.cloud/instances/9449de83-64ac-45dc-9967-e7c75bbdca70/api/v1/receive",
                    "targetsUrl": "https://metrics.stackit.argus.eu01.cloud/instances/9449de83-64ac-45dc-9967-e7c75bbdca70",
                    "zipkinSpansUrl": "https://9449de83-64ac-zk.traces.stackit.argus.eu01.cloud/instances/9449de83-64ac-45dc-9967-e7c75bbdca70"
                  },
                  "isUpdatable": true,
                  "message": "Successfully got instance",
                  "name": "testing",
                  "parameters": {},
                  "planId": "a9d5b2df-82dd-40d6-91e9-d551f2de3dda",
                  "planName": "Observability-Basic-EU01",
                  "planSchema": "{}",
                  "serviceName": "STACKIT Argus",
                  "status": "CREATE_SUCCEEDED"
                },
                "schema": {
                  "$ref": "#/components/schemas/GetInstanceResponse"
                }
              }
            },
            "description": "Get instance data"
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You are not authorized"
          }
        }
      },
      "put": {
        "description": "Update instance.",
        "operationId": "UpdateInstance",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInstancePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Successfully updated instance"
                },
                "schema": {
                  "$ref": "#/components/schemas/InstanceResponse"
                }
              }
            },
            "description": "Update instance in project."
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "json body is not valid"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Something went wrong."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You do not have permission to perform this action."
          }
        }
      }
    },
    "/v1/projects/{projectId}/instances/{instanceId}/acl": {
      "get": {
        "description": "Get acl for instance.",
        "operationId": "ListACL",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "acl": [
                    "0.0.0.0"
                  ],
                  "message": "Successfully got acl"
                },
                "schema": {
                  "$ref": "#/components/schemas/ListACLResponse"
                }
              }
            },
            "description": "Get acl config"
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You do not have permission to perform this action."
          }
        }
      },
      "put": {
        "description": "Update acl config.",
        "operationId": "UpdateACL",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateACLPayload"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Successfully updated acl"
                },
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Update acl config."
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Could not update acl config"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Something went wrong"
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You do not have permission to perform this action."
          }
        }
      }
    },
    "/v1/projects/{projectId}/instances/{instanceId}/alertconfigs": {
      "get": {
        "description": "Get alert config.",
        "operationId": "GetAlertConfigs",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "global": {
                      "smtpAuthPassword": "password",
                      "smtpAuthUsername": "alertmanager",
                      "smtpFrom": "alertmanager@example.org",
                      "smtpSmarthost": "localhost:25"
                    },
                    "inhibitRules": [
                      {
                        "equal": [
                          "alertname",
                          "cluster",
                          "service"
                        ],
                        "sourceMatch": {
                          "severity": "criticals"
                        },
                        "targetMatch": {
                          "severity": "warning"
                        }
                      }
                    ],
                    "receivers": [
                      {
                        "emailConfigs": [
                          {
                            "to": "team-X+alerts@example.org"
                          }
                        ],
                        "name": "team-X-mails"
                      },
                      {
                        "emailConfigs": [
                          {
                            "to": "team-X+papers@example.org"
                          }
                        ],
                        "name": "team-X-paper"
                      },
                      {
                        "emailConfigs": [
                          {
                            "to": "team-Y+paper@example.org"
                          }
                        ],
                        "name": "team-Y-paper"
                      },
                      {
                        "emailConfigs": [
                          {
                            "to": "team-X+alerts-critical@example.org"
                          }
                        ],
                        "name": "team-X-pager",
                        "opsgenieConfigs": [
                          {
                            "apiKey": "12345678",
                            "apiUrl": "https://example.opsgenie.org"
                          }
                        ]
                      }
                    ],
                    "route": {
                      "groupBy": [
                        "alertname",
                        "cluster",
                        "service"
                      ],
                      "groupInterval": "5m",
                      "groupWait": "30s",
                      "receiver": "team-X-mails",
                      "repeatInterval": "3h",
                      "routes": [
                        {
                          "matchRe": {
                            "service": "^(foo1|foo2|baz)$"
                          },
                          "receiver": "team-X-paper"
                        },
                        {
                          "match": {
                            "service": "files"
                          },
                          "receiver": "team-X-pager"
                        }
                      ]
                    }
                  },
                  "message": "Success"
                },
                "schema": {
                  "$ref": "#/components/schemas/GetAlertConfigsResponse"
                }
              }
            },
            "description": "Get alert config"
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You are not authorized"
          }
        }
      },
      "put": {
        "description": "Update alert config.",
        "operationId": "UpdateAlertConfigs",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAlertConfigsPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "global": {
                      "smtpAuthPassword": "password",
                      "smtpAuthUsername": "alertmanager",
                      "smtpFrom": "alertmanager@example.org",
                      "smtpSmarthost": "localhost:25"
                    },
                    "inhibitRules": [
                      {
                        "equal": [
                          "alertname",
                          "cluster",
                          "service"
                        ],
                        "sourceMatch": {
                          "severity": "criticals"
                        },
                        "targetMatch": {
                          "severity": "warning"
                        }
                      }
                    ],
                    "receivers": [
                      {
                        "emailConfigs": [
                          {
                            "to": "team-X+alerts@example.org"
                          }
                        ],
                        "name": "team-X-mails"
                      },
                      {
                        "emailConfigs": [
                          {
                            "to": "team-X+papers@example.org"
                          }
                        ],
                        "name": "team-X-paper"
                      },
                      {
                        "emailConfigs": [
                          {
                            "to": "team-Y+paper@example.org"
                          }
                        ],
                        "name": "team-Y-paper"
                      },
                      {
                        "emailConfigs": [
                          {
                            "to": "team-X+alerts-critical@example.org"
                          }
                        ],
                        "name": "team-X-pager",
                        "opsgenieConfigs": [
                          {
                            "apiKey": "12345678",
                            "apiUrl": "https://example.opsgenie.org"
                          }
                        ]
                      }
                    ],
                    "route": {
                      "groupBy": [
                        "alertname",
                        "cluster",
                        "service"
                      ],
                      "groupInterval": "5m",
                      "groupWait": "30s",
                      "receiver": "team-X-mails",
                      "repeatInterval": "3h",
                      "routes": [
                        {
                          "matchRe": {
                            "service": "^(foo1|foo2|baz)$"
                          },
                          "receiver": "team-X-paper"
                        },
                        {
                          "match": {
                            "service": "files"
                          },
                          "receiver": "team-X-pager"
                        }
                      ]
                    }
                  },
                  "message": "Success"
                },
                "schema": {
                  "$ref": "#/components/schemas/UpdateAlertConfigsResponse"
                }
              }
            },
            "description": "Update alert config."
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Could not update alert config"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Something went wrong updating the alert config."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You are not authorized"
          }
        }
      }
    },
    "/v1/projects/{projectId}/instances/{instanceId}/alertconfigs/receivers": {
      "get": {
        "description": "Get alert config receivers.",
        "operationId": "ListAlertConfigReceivers",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "emailConfigs": [
                        {
                          "to": "team-X+alerts@example.org"
                        }
                      ],
                      "name": "team-X-mails"
                    },
                    {
                      "emailConfigs": [
                        {
                          "to": "team-X+papers@example.org"
                        }
                      ],
                      "name": "team-X-paper"
                    },
                    {
                      "emailConfigs": [
                        {
                          "to": "team-Y+paper@example.org"
                        }
                      ],
                      "name": "team-Y-paper"
                    },
                    {
                      "emailConfigs": [
                        {
                          "to": "team-X+alerts-critical@example.org"
                        }
                      ],
                      "name": "team-X-pager",
                      "opsgenieConfigs": [
                        {
                          "apiKey": "12345678",
                          "apiUrl": "https://example.opsgenie.org"
                        }
                      ]
                    }
                  ],
                  "message": "Success"
                },
                "schema": {
                  "$ref": "#/components/schemas/AlertConfigReceiversResponse"
                }
              }
            },
            "description": "Get alert config receivers"
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You are not authorized"
          }
        }
      },
      "post": {
        "description": "Create alert config receiver.",
        "operationId": "CreateAlertConfigReceiver",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAlertConfigReceiverPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "emailConfigs": [
                        {
                          "to": "team-X+alerts@example.org"
                        }
                      ],
                      "name": "team-X-mails"
                    },
                    {
                      "emailConfigs": [
                        {
                          "to": "team-X+papers@example.org"
                        }
                      ],
                      "name": "team-X-paper"
                    },
                    {
                      "emailConfigs": [
                        {
                          "to": "team-Y+paper@example.org"
                        }
                      ],
                      "name": "team-Y-paper"
                    },
                    {
                      "emailConfigs": [
                        {
                          "to": "team-X+alerts-critical@example.org"
                        }
                      ],
                      "name": "team-X-pager",
                      "opsgenieConfigs": [
                        {
                          "apiKey": "12345678",
                          "apiUrl": "https://example.opsgenie.org"
                        }
                      ]
                    }
                  ],
                  "message": "Success"
                },
                "schema": {
                  "$ref": "#/components/schemas/AlertConfigReceiversResponse"
                }
              }
            },
            "description": "Create alert config receiver."
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Something went wrong"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Something went wrong."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You are not authorized"
          }
        }
      }
    },
    "/v1/projects/{projectId}/instances/{instanceId}/alertconfigs/receivers/{receiver}": {
      "delete": {
        "description": "Delete alert config receiver.",
        "operationId": "DeleteAlertConfigReceiver",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "receiver",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "emailConfigs": [
                        {
                          "to": "team-X+alerts@example.org"
                        }
                      ],
                      "name": "team-X-mails"
                    },
                    {
                      "emailConfigs": [
                        {
                          "to": "team-X+papers@example.org"
                        }
                      ],
                      "name": "team-X-paper"
                    },
                    {
                      "emailConfigs": [
                        {
                          "to": "team-Y+paper@example.org"
                        }
                      ],
                      "name": "team-Y-paper"
                    },
                    {
                      "emailConfigs": [
                        {
                          "to": "team-X+alerts-critical@example.org"
                        }
                      ],
                      "name": "team-X-pager",
                      "opsgenieConfigs": [
                        {
                          "apiKey": "12345678",
                          "apiUrl": "https://example.opsgenie.org"
                        }
                      ]
                    }
                  ],
                  "message": "Success"
                },
                "schema": {
                  "$ref": "#/components/schemas/AlertConfigReceiversResponse"
                }
              }
            },
            "description": "Delete alert config receiver."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You are not authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Alert config receiver not found."
                },
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Alert config receiver not found."
          }
        }
      },
      "get": {
        "description": "Get alert config receivers.",
        "operationId": "GetAlertConfigReceiver",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "receiver",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "emailConfigs": [
                      {
                        "to": "team-X+alerts@example.org"
                      }
                    ],
                    "name": "team-X-mails"
                  },
                  "message": "Success"
                },
                "schema": {
                  "$ref": "#/components/schemas/Receiver"
                }
              }
            },
            "description": "Get alert config receiver"
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You are not authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Alert config receiver not found."
                },
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Alert config receiver not found."
          }
        }
      },
      "put": {
        "description": "Update alert config receiver.",
        "operationId": "UpdateAlertConfigReceiver",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "receiver",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAlertConfigReceiverPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "emailConfigs": [
                        {
                          "to": "team-X+alerts@example.org"
                        }
                      ],
                      "name": "team-X-mails"
                    },
                    {
                      "emailConfigs": [
                        {
                          "to": "team-X+papers@example.org"
                        }
                      ],
                      "name": "team-X-paper"
                    },
                    {
                      "emailConfigs": [
                        {
                          "to": "team-Y+paper@example.org"
                        }
                      ],
                      "name": "team-Y-paper"
                    },
                    {
                      "emailConfigs": [
                        {
                          "to": "team-X+alerts-critical@example.org"
                        }
                      ],
                      "name": "team-X-pager",
                      "opsgenieConfigs": [
                        {
                          "apiKey": "12345678",
                          "apiUrl": "https://example.opsgenie.org"
                        }
                      ]
                    }
                  ],
                  "message": "Success"
                },
                "schema": {
                  "$ref": "#/components/schemas/AlertConfigReceiversResponse"
                }
              }
            },
            "description": "Update alert config receiver."
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Something went wrong"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Something went wrong."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You are not authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Alert config receiver not found."
                },
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Alert config receiver not found."
          }
        }
      }
    },
    "/v1/projects/{projectId}/instances/{instanceId}/alertconfigs/routes": {
      "get": {
        "description": "Get alert config route.",
        "operationId": "ListAlertConfigRoutes",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "groupBy": [
                      "alertname",
                      "cluster",
                      "service"
                    ],
                    "groupInterval": "5m",
                    "groupWait": "30s",
                    "receiver": "team-X-mails",
                    "repeatInterval": "3h",
                    "routes": [
                      {
                        "matchRe": {
                          "service": "^(foo1|foo2|baz)$"
                        },
                        "receiver": "team-X-paper"
                      },
                      {
                        "match": {
                          "service": "files"
                        },
                        "receiver": "team-X-pager"
                      }
                    ]
                  },
                  "message": "Success"
                },
                "schema": {
                  "$ref": "#/components/schemas/AlertConfigRouteResponse"
                }
              }
            },
            "description": "Get alert config route"
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You are not authorized"
          }
        }
      },
      "post": {
        "description": "Create alert config route in routes of route.",
        "operationId": "CreateAlertConfigRoute",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAlertConfigRoutePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "groupBy": [
                      "alertname",
                      "cluster",
                      "service"
                    ],
                    "groupInterval": "5m",
                    "groupWait": "30s",
                    "receiver": "team-X-mails",
                    "repeatInterval": "3h",
                    "routes": [
                      {
                        "matchRe": {
                          "service": "^(foo1|foo2|baz)$"
                        },
                        "receiver": "team-X-paper"
                      },
                      {
                        "match": {
                          "service": "files"
                        },
                        "receiver": "team-X-pager"
                      }
                    ]
                  },
                  "message": "Success"
                },
                "schema": {
                  "$ref": "#/components/schemas/AlertConfigRouteResponse"
                }
              }
            },
            "description": "Create alert config route."
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Something went wrong"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Something went wrong."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You are not authorized"
          }
        }
      }
    },
    "/v1/projects/{projectId}/instances/{instanceId}/alertconfigs/routes/{receiver}": {
      "delete": {
        "description": "Delete alert receiver for route.",
        "operationId": "DeleteAlertConfigRoute",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "receiver",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "groupBy": [
                      "alertname",
                      "cluster",
                      "service"
                    ],
                    "groupInterval": "5m",
                    "groupWait": "30s",
                    "receiver": "team-X-mails",
                    "repeatInterval": "3h",
                    "routes": [
                      {
                        "matchRe": {
                          "service": "^(foo1|foo2|baz)$"
                        },
                        "receiver": "team-X-paper"
                      },
                      {
                        "match": {
                          "service": "files"
                        },
                        "receiver": "team-X-pager"
                      }
                    ]
                  },
                  "message": "Success"
                },
                "schema": {
                  "$ref": "#/components/schemas/AlertConfigRouteResponse"
                }
              }
            },
            "description": "Delete alert config route."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You are not authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Alert config route not found."
                },
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Alert config route not found."
          }
        }
      },
      "get": {
        "description": "Get alert receiver for route.",
        "operationId": "GetAlertConfigRoute",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "receiver",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "groupBy": [
                      "alertname",
                      "cluster",
                      "service"
                    ],
                    "groupInterval": "5m",
                    "groupWait": "30s",
                    "receiver": "team-X-mails",
                    "repeatInterval": "3h",
                    "routes": [
                      {
                        "matchRe": {
                          "service": "^(foo1|foo2|baz)$"
                        },
                        "receiver": "team-X-paper"
                      },
                      {
                        "match": {
                          "service": "files"
                        },
                        "receiver": "team-X-pager"
                      }
                    ]
                  },
                  "message": "Success"
                },
                "schema": {
                  "$ref": "#/components/schemas/AlertConfigRouteResponse"
                }
              }
            },
            "description": "Get alert config route"
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You are not authorized"
          }
        }
      },
      "put": {
        "description": "Update alert receiver for route.",
        "operationId": "UpdateAlertConfigRoute",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "receiver",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAlertConfigRoutePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "groupBy": [
                      "alertname",
                      "cluster",
                      "service"
                    ],
                    "groupInterval": "5m",
                    "groupWait": "30s",
                    "receiver": "team-X-mails",
                    "repeatInterval": "3h",
                    "routes": [
                      {
                        "matchRe": {
                          "service": "^(foo1|foo2|baz)$"
                        },
                        "receiver": "team-X-paper"
                      },
                      {
                        "match": {
                          "service": "files"
                        },
                        "receiver": "team-X-pager"
                      }
                    ]
                  },
                  "message": "Success"
                },
                "schema": {
                  "$ref": "#/components/schemas/AlertConfigRouteResponse"
                }
              }
            },
            "description": "Update alert config route."
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Something went wrong"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Something went wrong."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You are not authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Alert config route not found."
                },
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Alert config route not found."
          }
        }
      }
    },
    "/v1/projects/{projectId}/instances/{instanceId}/credentials": {
      "get": {
        "description": "Get all technical user credentials.",
        "operationId": "ListCredentials",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "credentials": [
                    {
                      "credentialsInfo": {
                        "username": "test"
                      },
                      "id": "test",
                      "name": "test"
                    }
                  ],
                  "message": "Successfully received all technical users"
                },
                "schema": {
                  "$ref": "#/components/schemas/ListCredentialsResponse"
                }
              }
            },
            "description": "Get all technical credentials for an instance."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You are not authorized"
          }
        }
      },
      "post": {
        "description": "Create technical user credentials.",
        "operationId": "CreateCredentials",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "credentials": {
                    "password": "1fasAELDB234ddeDAfdasfel787oplpj",
                    "username": "test"
                  },
                  "message": "Successfully created api user"
                },
                "schema": {
                  "$ref": "#/components/schemas/CreateCredentialsResponse"
                }
              }
            },
            "description": "The technical credentials were successfully created."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You are not authorized"
          }
        }
      }
    },
    "/v1/projects/{projectId}/instances/{instanceId}/credentials/{username}": {
      "delete": {
        "description": "Delete technical credentials.",
        "operationId": "DeleteCredentials",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The technical credentials were successfully deleted"
                },
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "The technical credentials were successfully deleted."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You are not authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Technical credentials not found"
                },
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Technical credentials do not exists."
          },
          "500": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Failed to delete technical credentials"
                },
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Something went wrong deleting the technical credentials."
          }
        }
      },
      "get": {
        "description": "Get single technical credentials.",
        "operationId": "GetCredentials",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "credentialsInfo": {
                    "username": "testing_9449de83-64ac-45dc-9967-e7c75bbdca70_4d92d3d9-d5c2-4c0b-98ad-950878101d9e"
                  },
                  "id": "testing_9449de83-64ac-45dc-9967-e7c75bbdca70_4d92d3d9-d5c2-4c0b-98ad-950878101d9e",
                  "message": "The technical credentials were successfully deleted",
                  "name": "testing_9449de83-64ac-45dc-9967-e7c75bbdca70_4d92d3d9-d5c2-4c0b-98ad-950878101d9e"
                },
                "schema": {
                  "$ref": "#/components/schemas/GetCredentialsResponse"
                }
              }
            },
            "description": "The technical credentials was successfully retrieved."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You are not authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Technical credentials not found"
                },
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Technical credentials do not exists."
          }
        }
      }
    },
    "/v1/projects/{projectId}/instances/{instanceId}/credentials/{username}/remote-write-limits": {
      "delete": {
        "description": "Delete remote write config for credentials.",
        "operationId": "DeleteCredentialsRemoteWriteConfig",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "maxLimit": 5000,
                  "message": "Successfully deleted remote write limit config"
                },
                "schema": {
                  "$ref": "#/components/schemas/CredentialsRemoteWriteDeleteResponse"
                }
              }
            },
            "description": "Delete credentials remote write limit config."
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "json body is not valid"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Something went wrong"
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You do not have permission to perform this action."
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "credentials do not exist"
                },
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "credentials do not exist"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "failed to read kubernetes configmap"
                },
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "failed to read kubernetes configmap"
          }
        }
      },
      "get": {
        "description": "Get remote write config.",
        "operationId": "GetCredentialsRemoteWriteConfig",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "credentialsMaxLimit": 5000,
                  "maxLimit": 5000,
                  "message": "Successfully got remote write limit config"
                },
                "schema": {
                  "$ref": "#/components/schemas/CredentialsRemoteWriteConfig"
                }
              }
            },
            "description": "Get credentials remote write limit config."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You do not have permission to perform this action."
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "credentials do not exist"
                },
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "credentials do not exist"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "failed to read kubernetes configmap"
                },
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "failed to read kubernetes configmap"
          }
        }
      },
      "put": {
        "description": "Update remote write config for credentials.",
        "operationId": "UpdateCredentialsRemoteWriteConfig",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCredentialsRemoteWriteConfigPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "credentialsMaxLimit": 5000,
                  "maxLimit": 5000,
                  "message": "Successfully updated remote write limit config"
                },
                "schema": {
                  "$ref": "#/components/schemas/CredentialsRemoteWriteConfig"
                }
              }
            },
            "description": "Update credentials remote write limit config."
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "json body is not valid"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Something went wrong"
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You do not have permission to perform this action."
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "credentials do not exist"
                },
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "credentials do not exist"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "failed to read kubernetes configmap"
                },
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "failed to read kubernetes configmap"
          }
        }
      }
    },
    "/v1/projects/{projectId}/instances/{instanceId}/grafana-configs": {
      "get": {
        "description": "Get grafana config.",
        "operationId": "GetGrafanaConfigs",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Successfully got grafana config",
                  "publicReadAccess": false,
                  "useStackitSso": false
                },
                "schema": {
                  "$ref": "#/components/schemas/GrafanaConfigs"
                }
              }
            },
            "description": "Get grafana config."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You do not have permission to perform this action."
          }
        }
      },
      "put": {
        "description": "Update grafana config.",
        "operationId": "UpdateGrafanaConfigs",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGrafanaConfigsPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Successfully updated grafana config"
                },
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Update grafana config."
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Something went wrong"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Something went wrong"
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You do not have permission to perform this action."
          }
        }
      }
    },
    "/v1/projects/{projectId}/instances/{instanceId}/scrapeconfigs": {
      "get": {
        "description": "Get scrape configs.",
        "operationId": "ListScrapeConfigs",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "jobName": "test",
                      "metricsPath": "/metrics",
                      "scheme": "https",
                      "scrapeInterval": "5m",
                      "scrapeTimeout": "1m",
                      "staticConfigs": [
                        {
                          "targets": [
                            "example.com"
                          ]
                        }
                      ]
                    }
                  ],
                  "message": "Successfully got scrape config"
                },
                "schema": {
                  "$ref": "#/components/schemas/ListScrapeConfigsResponse"
                }
              }
            },
            "description": "Get all scrape targets."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You are not authorized"
          }
        }
      },
      "post": {
        "description": "Create scrape config.",
        "operationId": "CreateScrapeConfig",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateScrapeConfigPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "jobName": "test",
                      "metricsPath": "/metrics",
                      "scheme": "https",
                      "scrapeInterval": "5m",
                      "scrapeTimeout": "1m",
                      "staticConfigs": [
                        {
                          "targets": [
                            "example.com"
                          ]
                        }
                      ]
                    }
                  ],
                  "message": "Scrape target successfully created"
                },
                "schema": {
                  "$ref": "#/components/schemas/ScrapeConfigsResponse"
                }
              }
            },
            "description": "Create scrape target."
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Something went wrong"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Something went wrong."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You are not authorized"
          }
        }
      }
    },
    "/v1/projects/{projectId}/instances/{instanceId}/scrapeconfigs/{jobName}": {
      "delete": {
        "description": "Delete scrape config.",
        "operationId": "DeleteScrapeConfig",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "jobName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "jobName": "test",
                      "metricsPath": "/metrics",
                      "scheme": "https",
                      "scrapeInterval": "5m",
                      "scrapeTimeout": "1m",
                      "staticConfigs": [
                        {
                          "targets": [
                            "example.com"
                          ]
                        }
                      ]
                    }
                  ],
                  "message": "Job has been deleted successfully"
                },
                "schema": {
                  "$ref": "#/components/schemas/DeleteScrapeConfigResponse"
                }
              }
            },
            "description": "Delete scrape target."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You are not authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Scrape target not found."
                },
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Scrape target not found."
          }
        }
      },
      "get": {
        "description": "Get scrape config.",
        "operationId": "GetScrapeConfig",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "jobName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "jobName": "test",
                    "metricsPath": "/metrics",
                    "scheme": "https",
                    "scrapeInterval": "5m",
                    "scrapeTimeout": "1m",
                    "staticConfigs": [
                      {
                        "targets": [
                          "example.com"
                        ]
                      }
                    ]
                  },
                  "message": "Successfully got scrape target"
                },
                "schema": {
                  "$ref": "#/components/schemas/GetScrapeConfigResponse"
                }
              }
            },
            "description": "Get scrape target."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You are not authorized"
          }
        }
      },
      "put": {
        "description": "Update scrape config.",
        "operationId": "UpdateScrapeConfig",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "jobName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateScrapeConfigPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "jobName": "test",
                      "metricsPath": "/metrics",
                      "scheme": "https",
                      "scrapeInterval": "5m",
                      "scrapeTimeout": "1m",
                      "staticConfigs": [
                        {
                          "targets": [
                            "example.com"
                          ]
                        }
                      ]
                    }
                  ],
                  "message": "Successfully updated scrape target"
                },
                "schema": {
                  "$ref": "#/components/schemas/ScrapeConfigsResponse"
                }
              }
            },
            "description": "Update scrape target."
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Something went wrong"
                },
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Something went wrong."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You are not authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Scrape target not found."
                },
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Scrape target not found."
          }
        }
      }
    },
    "/v1/projects/{projectId}/plans": {
      "get": {
        "description": "Get all plans.",
        "operationId": "ListPlans",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Successfully got plans",
                  "plans": [
                    {
                      "alertMatchers": 10,
                      "alertReceivers": 10,
                      "alertRules": 1000,
                      "amount": 49,
                      "bucketSize": 20,
                      "description": "Small Plan",
                      "grafanaGlobalDashboards": 20,
                      "grafanaGlobalOrgs": 2,
                      "grafanaGlobalSessions": 10,
                      "grafanaGlobalUsers": 10,
                      "id": "7b1fbd9c-9acd-42ce-95d3-0f6822d6cabe",
                      "isFree": false,
                      "isPublic": true,
                      "logsAlert": 20,
                      "logsStorage": 20,
                      "name": "SmallPlan",
                      "planId": "7b1fbd9c-9acd-42ce-95d3-0f6822d6cabe",
                      "samplesPerScrape": 0,
                      "schema": "{}",
                      "targetNumber": 2,
                      "totalMetricSamples": 5000,
                      "tracesStorage": 20
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/PlansResponse"
                }
              }
            },
            "description": "Get all plans"
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "You do not have permission to perform this action."
                },
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "You are not authorized"
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "servers": [
    {
      "url": "https://argus.api.{region}stackit.cloud",
      "variables": {
        "region": {
          "default": "eu01.",
          "enum": [
            "eu01."
          ]
        }
      }
    }
  ]
}