{
  "components": {
    "examples": {
      "conflict": {
        "value": {
          "error": "Conflict",
          "message": "Some information about what caused the Error",
          "path": "/v2/path/which/returned/error",
          "status": 409,
          "timeStamp": "2019-08-24T14:15:22Z"
        }
      },
      "forbiddenExample": {
        "value": {
          "error": "Forbidden",
          "message": "Some information about what caused the Error",
          "path": "/v2/path/which/returned/error",
          "status": 403,
          "timeStamp": "2019-08-24T14:15:22Z"
        }
      },
      "notfound": {
        "value": {
          "error": "Not Found",
          "message": "{resource} not found",
          "path": "/v2/path/which/returned/error/{resource}",
          "status": 404,
          "timeStamp": "2019-08-24T14:15:22Z"
        }
      },
      "scimSchema": {
        "value": {
          "attributes": [
            {
              "caseExact": "true",
              "description": "Unique identifier for the Service Account. REQUIRED.",
              "multiValued": "false",
              "mutability": "readOnly",
              "name": "id",
              "required": "true",
              "returned": "default",
              "type": "string",
              "uniqueness": "server"
            },
            {
              "caseExact": "false",
              "description": "Unique identifier of the service account in format of an email address generated by the service containing the prefix provided by the user during creation. REQUIRED.",
              "multiValued": "false",
              "mutability": "readOnly",
              "name": "email",
              "required": "true",
              "returned": "default",
              "type": "string",
              "uniqueness": "global"
            },
            {
              "caseExact": "true",
              "description": "The name of the Service Account, suitable for display to end-users. Value should match `^[a-z](?:-?[a-z0-9]+)*$` and have length `[1..20]`. REQUIRED.",
              "multiValued": "false",
              "mutability": "readWrite",
              "name": "name",
              "required": "true",
              "returned": "default",
              "type": "string",
              "uniqueness": "none"
            },
            {
              "caseExact": "true",
              "description": "Identifier of related project. REQUIRED.",
              "multiValued": "false",
              "mutability": "readOnly",
              "name": "projectId",
              "required": "true",
              "returned": "default",
              "type": "string",
              "uniqueness": "global"
            },
            {
              "description": "A Boolean value indicating internal Service Accounts. REQUIRED.",
              "multiValued": "false",
              "mutability": "readOnly",
              "name": "internal",
              "required": "true",
              "returned": "default",
              "type": "boolean"
            }
          ],
          "description": "Service Account",
          "id": "urn:serviceaccountservice:scim:schemas:2.0:ServiceAccount",
          "meta": {
            "location": "/v2/Schemas/urn:serviceaccountservice:scim:schemas:2.0:ServiceAccount",
            "resourceType": "Schema"
          },
          "name": "ServiceAccount"
        }
      }
    },
    "parameters": {
      "count": {
        "description": "Non-negative integer. Specifies the desired maximum number of query results per page.",
        "in": "query",
        "name": "count",
        "schema": {
          "default": 50,
          "maximum": 100,
          "minimum": 0,
          "type": "number"
        }
      },
      "filter": {
        "description": "Controls and refines data returned. If filter value is empty, filter is ignored.",
        "in": "query",
        "name": "filter",
        "schema": {
          "type": "string"
        }
      },
      "sortBy": {
        "description": "The attribute response is ordered by.",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "createdDate",
          "type": "string"
        }
      },
      "sortOrder": {
        "description": "The response attribute order direction.",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "ASCENDING",
          "enum": [
            "ASCENDING",
            "DESCENDING"
          ],
          "type": "string"
        }
      },
      "startIndex": {
        "description": "The 1-based index of the first query result.",
        "in": "query",
        "name": "startIndex",
        "schema": {
          "default": 1,
          "minimum": 1,
          "type": "number"
        }
      }
    },
    "schemas": {
      "AuthError": {
        "example": {
          "error": {
            "code": 401,
            "message": "The request could not be authorized",
            "status": "Unauthorized"
          }
        },
        "properties": {
          "error": {
            "properties": {
              "code": {
                "type": "integer"
              },
              "message": {
                "type": "string"
              },
              "status": {
                "type": "string"
              }
            },
            "required": [
              "code",
              "status",
              "message"
            ],
            "type": "object"
          }
        },
        "required": [
          "error"
        ],
        "title": "AuthError",
        "type": "object"
      },
      "Error": {
        "description": "Contains error information.",
        "example": {
          "error": "Bad Request",
          "message": "Some information about what caused the Error",
          "path": "/v1/path/which/returned/error",
          "status": 400,
          "timeStamp": "2019-08-24T14:15:22Z"
        },
        "properties": {
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "status": {
            "type": "integer"
          },
          "timeStamp": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "timeStamp",
          "path",
          "status",
          "error",
          "message"
        ],
        "title": "ErrorResponse",
        "type": "object"
      },
      "ScimError": {
        "description": "Contains SCIM compliant error information.",
        "properties": {
          "response": {
            "$ref": "#/components/schemas/ScimErrorResponseDetail"
          },
          "status": {
            "example": "400",
            "type": "string"
          }
        },
        "required": [
          "status",
          "response"
        ],
        "title": "ScimErrorResponse",
        "type": "object"
      },
      "ScimErrorResponseDetail": {
        "properties": {
          "detail": {
            "example": [
              "Bad Request",
              "SCIM attribute not valid or not supported: 'value'"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "schemas": {
            "example": [
              "urn:ietf:params:scim:api:messages:2.0:Error"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "scimType": {
            "example": "invalidValue",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ScimListResponse": {
        "description": "SCIM service accounts",
        "properties": {
          "Resources": {
            "items": {
              "$ref": "#/components/schemas/ScimServiceAccount"
            },
            "type": "array"
          },
          "itemsPerPage": {
            "description": "The number of service accounts returned in a list response page. Required when partial results are returned due to pagination.",
            "example": 2,
            "type": "integer"
          },
          "schemas": {
            "description": "SCIM schema used.",
            "items": {
              "example": "urn:ietf:params:scim:api:messages:2.0:ListResponse",
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "startIndex": {
            "description": "The 1-based index of the first result in the current set of list results. Required when partial results are returned due to pagination.",
            "example": 1,
            "type": "integer"
          },
          "totalResults": {
            "description": "The total number of results returned by the list or query operation.  The value may be larger than the number of resources returned",
            "example": 100,
            "type": "integer"
          }
        },
        "required": [
          "schemas",
          "totalResults",
          "itemsPerPage",
          "startIndex",
          "Resources"
        ],
        "title": "SCIM service accounts",
        "type": "object"
      },
      "ScimSchemaServiceAccount": {
        "properties": {
          "attributes": {
            "description": "SCIM resource attributes.",
            "items": {
              "properties": {
                "caseExact": {
                  "description": "Boolean value that specifies whether or not a string attribute is case sensitive.",
                  "type": "string"
                },
                "description": {
                  "description": "Attribute's human-readable description.",
                  "type": "string"
                },
                "multiValued": {
                  "description": "Boolean value indicating attribute's plurality.",
                  "type": "string"
                },
                "mutability": {
                  "description": "Keyword indicating the circumstances under which the value of the attribute can be (re)defined.",
                  "type": "string"
                },
                "name": {
                  "description": "Attribute's name.",
                  "type": "string"
                },
                "required": {
                  "description": "Boolean value indicating wheter attribute is required or not.",
                  "type": "string"
                },
                "returned": {
                  "description": "Keyword that indicates when an attribute and associated values are returned in response to a GET request or in response to a PUT, POST, or PATCH request.",
                  "example": "default",
                  "type": "string"
                },
                "type": {
                  "description": "Attributes's data type.",
                  "type": "string"
                },
                "uniqueness": {
                  "description": "Keyword value that specifies how the service provider enforces uniqueness of attribute values.",
                  "example": "server",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "description": {
            "description": "The schema's human-readable description.",
            "example": "Service Account",
            "type": "string"
          },
          "id": {
            "description": "The unique URI of the schema.",
            "example": "urn:serviceaccountservice:scim:schemas:2.0:ServiceAccount",
            "type": "string"
          },
          "meta": {
            "description": "SCIM schema meta information.",
            "type": "object"
          },
          "name": {
            "description": "The schema's human-readable name.",
            "example": "ServiceAccount",
            "type": "string"
          }
        },
        "required": [
          "id",
          "attributes",
          "meta"
        ],
        "title": "ScimSchemaServiceAccount",
        "type": "object"
      },
      "ScimServiceAccount": {
        "properties": {
          "email": {
            "description": "Unique identifier of the service account in format of an email address generated by the service containing the prefix provided by the user during creation.",
            "example": "my-service-account-aBc2defg@sa.stackit.cloud",
            "format": "email",
            "type": "string"
          },
          "id": {
            "description": "Unique ID of the service account. It is also used in the 'sub' field of the service accounts access tokens.",
            "format": "uuid",
            "type": "string"
          },
          "internal": {
            "description": "A Boolean value indicating internal service accounts.",
            "type": "boolean"
          },
          "meta": {
            "properties": {
              "created": {
                "description": "Timestamp service account was created",
                "example": "2023-05-31T14:15:22Z",
                "format": "date-time",
                "type": "string"
              },
              "lastModified": {
                "description": "Timestamp service account was last modified",
                "example": "2023-05-31T14:15:22Z",
                "format": "date-time",
                "type": "string"
              },
              "location": {
                "description": "The URI of the service account being returned.",
                "example": "https://api.stackit.cloud/service-account/v2/scim/ServiceAccounts/54cf616d-dbd0-4d06-a7f3-57185ce3b769",
                "type": "string"
              },
              "resourceType": {
                "description": "Name of the SCIM resource type",
                "example": "ServiceAccount",
                "type": "string"
              },
              "version": {
                "description": "The version of the service account being returned. Currently empty.",
                "example": "",
                "type": "string"
              }
            },
            "required": [
              "resourceType",
              "created",
              "lastModified",
              "version",
              "location"
            ],
            "type": "object"
          },
          "name": {
            "description": "Name of the service account, suitable for display to end-users.",
            "example": "my-service-",
            "type": "string"
          },
          "projectId": {
            "description": "Identifier of related project.",
            "example": "7f2388c5-2ea9-46b5-88d4-01ef50d7a9fe",
            "type": "string"
          },
          "schemas": {
            "description": "Array of strings containing SCIM's primary/base schema URI.",
            "example": [
              "urn:serviceaccountservice:scim:schemas:2.0:ServiceAccount"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "schemas",
          "id",
          "email",
          "projectId",
          "internal",
          "name",
          "meta"
        ],
        "title": "ScimServiceAccount",
        "type": "object"
      },
      "ServiceAccountKeyListResponse": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "description": "Creation time of the key",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Unique ID of the key.",
            "format": "uuid",
            "type": "string"
          },
          "keyAlgorithm": {
            "enum": [
              "RSA_2048"
            ],
            "type": "string"
          },
          "keyOrigin": {
            "enum": [
              "USER_PROVIDED",
              "GENERATED"
            ],
            "type": "string"
          },
          "keyType": {
            "enum": [
              "USER_MANAGED",
              "SYSTEM_MANAGED"
            ],
            "type": "string"
          },
          "validUntil": {
            "description": "If specified, the timestamp until the key is active. May be null",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "publicKey",
          "createdAt",
          "keyType",
          "keyOrigin",
          "keyAlgorithm",
          "active"
        ],
        "title": "ServiceAccountKeyListResponse",
        "type": "object"
      },
      "CreateServiceAccountPayload": {
        "properties": {
          "name": {
            "description": "The requested name of the service account. The service will generate a unique email from this name.",
            "example": "my-sa-prefix",
            "maxLength": 20,
            "minLength": 1,
            "pattern": "^[a-z](?:-?[a-z0-9]+)*$",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "title": "CreateServiceAccountRequestBodyV2",
        "type": "object"
      },
      "CreateAccessTokenPayload": {
        "properties": {
          "ttlDays": {
            "description": "The duration in days for how long the new Access Token should be valid.",
            "maximum": 180,
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [
          "ttlDays"
        ],
        "title": "CreateAccessTokenRequestBody",
        "type": "object"
      },
      "CreateServiceAccountKeyPayload": {
        "properties": {
          "publicKey": {
            "description": "Optional, public key part of the user generated RSA key-pair wrapped in a [X.509 v3 certificate](https://www.rfc-editor.org/rfc/rfc5280)",
            "type": "string"
          },
          "validUntil": {
            "description": "Optional, date of key expiration. When omitted, key is valid until deleted",
            "format": "date-time",
            "type": "string"
          }
        },
        "title": "ServiceAccountKeyRequest",
        "type": "object"
      },
      "PartialUpdateServiceAccountKeyPayload": {
        "properties": {
          "active": {
            "description": "Active keys are valid, while inactive keys are temporarily deactivated.",
            "type": "boolean"
          },
          "validUntil": {
            "description": "Optional, date of key expiration. To disable, set time to \"9999-01-01T01:01:01Z\"",
            "format": "date-time",
            "type": "string"
          }
        },
        "title": "ServiceAccountKeyUpdateRequest",
        "type": "object"
      },
      "AccessTokenMetadata": {
        "description": "Does not contain the actual token.",
        "properties": {
          "active": {
            "description": "If true, access token can be used for authorized API calls, if false, the token is not usable anymore.",
            "type": "boolean"
          },
          "createdAt": {
            "description": "Creation time of the access token.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Unique ID of the access token. Also used as JTI field.",
            "format": "uuid",
            "type": "string"
          },
          "validUntil": {
            "description": "Approximate expiration time of the access token. Check the JWT for actual validity date.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "createdAt",
          "validUntil",
          "active"
        ],
        "title": "AccessTokenMetadataV2",
        "type": "object"
      },
      "AccessToken": {
        "description": "Contains token metadata and actual token.",
        "properties": {
          "active": {
            "description": "Newly created access tokens are valid, and can be revoked if needed.",
            "type": "boolean"
          },
          "createdAt": {
            "description": "Creation time of the access token.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Unique ID of the access token. Also used as JTI field.",
            "format": "uuid",
            "type": "string"
          },
          "token": {
            "description": "The access token in JWT format. Use this with `Bearer` prefix for API calls. Store it, as it is not recoverable later.",
            "type": "string"
          },
          "validUntil": {
            "description": "Approximate expiration time of the access token. Check the JWT for actual validity date.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "createdAt",
          "validUntil",
          "active",
          "token"
        ],
        "title": "AccessTokenV2",
        "type": "object"
      },
      "CreateInternalServiceAccountPayload": {
        "properties": {
          "name": {
            "description": "The requested name of the service account. The service will generate a unique email from this name.",
            "example": "my-sa-prefix",
            "maxLength": 20,
            "minLength": 1,
            "pattern": "^[a-z](?:-?[a-z0-9]+)*$",
            "type": "string"
          },
          "suffix": {
            "description": "The requested suffix for the service account. The service will generate a unique email from this name.",
            "example": "compute",
            "maxLength": 20,
            "minLength": 1,
            "pattern": "^[a-z](?:-?[a-z]+)*$",
            "type": "string"
          }
        },
        "required": [
          "name",
          "suffix"
        ],
        "title": "CreateInternalServiceAccountRequestBodyV2",
        "type": "object"
      },
      "ListAccessTokensResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/AccessTokenMetadata"
            },
            "type": "array"
          }
        },
        "title": "GetAccessTokensResponseBodyV2",
        "type": "object"
      },
      "JWKS": {
        "properties": {
          "keys": {
            "items": {
              "$ref": "#/components/schemas/JWK"
            },
            "type": "array"
          }
        },
        "required": [
          "keys"
        ],
        "title": "GetJWKResponseBody",
        "type": "object"
      },
      "ListServiceAccountKeysResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ServiceAccountKeyListResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "items"
        ],
        "title": "GetServiceAccountsResponseBody",
        "type": "object"
      },
      "ListServiceAccountsResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ServiceAccount"
            },
            "type": "array"
          }
        },
        "required": [
          "items"
        ],
        "title": "GetServiceAccountsResponseBodyV2",
        "type": "object"
      },
      "IntrospectJWTPayload": {
        "properties": {
          "token": {
            "type": "string"
          },
          "token_type_hint": {
            "type": "string"
          }
        },
        "required": [
          "token"
        ],
        "title": "IntrospectRequestBody",
        "type": "object"
      },
      "IntrospectJWTResponse": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "aud": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "client_id": {
            "type": "string"
          },
          "exp": {
            "type": "integer"
          },
          "iat": {
            "type": "integer"
          },
          "iss": {
            "type": "string"
          },
          "jti": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "sub": {
            "type": "string"
          },
          "token_type": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "active"
        ],
        "title": "IntrospectResponseBody",
        "type": "object"
      },
      "JWK": {
        "description": "JSON Web Key according to https://datatracker.ietf.org/doc/html/rfc7517#section-4",
        "properties": {
          "alg": {
            "type": "string"
          },
          "e": {
            "type": "string"
          },
          "kid": {
            "type": "string"
          },
          "ks": {
            "type": "string"
          },
          "n": {
            "type": "string"
          },
          "ops": {
            "type": "string"
          },
          "use": {
            "type": "string"
          },
          "x5c": {
            "type": "string"
          },
          "x5t": {
            "type": "string"
          },
          "x5t256": {
            "type": "string"
          },
          "x5u": {
            "type": "string"
          }
        },
        "required": [
          "n",
          "e"
        ],
        "title": "JsonWebKey",
        "type": "object"
      },
      "ImpersonateServiceAccountPayload": {
        "properties": {
          "lifetime": {
            "default": 3600,
            "description": "Lifetime of the created access token in seconds.",
            "maximum": 3600,
            "minimum": 1,
            "type": "integer"
          }
        },
        "title": "ServiceAccountImpersonationRequestBody",
        "type": "object"
      },
      "ImpersonateServiceAccountResponse": {
        "properties": {
          "access_token": {
            "description": "The short lived token that can be used for API access",
            "type": "string"
          },
          "expires_in": {
            "description": "Time in seconds till token expires",
            "example": 3600,
            "type": "integer"
          },
          "token_type": {
            "enum": [
              "Bearer"
            ],
            "type": "string"
          }
        },
        "required": [
          "access_token",
          "token_type",
          "expires_in"
        ],
        "title": "ServiceAccountImpersonationResponse",
        "type": "object"
      },
      "PartialUpdateServiceAccountKeyResponse": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "description": "Creation time of the key",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Unique ID of the key.",
            "format": "uuid",
            "type": "string"
          },
          "keyAlgorithm": {
            "enum": [
              "RSA_2048"
            ],
            "type": "string"
          },
          "keyOrigin": {
            "enum": [
              "USER_PROVIDED",
              "GENERATED"
            ],
            "type": "string"
          },
          "keyType": {
            "enum": [
              "USER_MANAGED",
              "SYSTEM_MANAGED"
            ],
            "type": "string"
          },
          "validUntil": {
            "description": "If specified, the timestamp until the key is active. May be null",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "publicKey",
          "createdAt",
          "keyType",
          "keyOrigin",
          "keyAlgorithm",
          "active"
        ],
        "title": "ServiceAccountKeyPatchResponse",
        "type": "object"
      },
      "CreateServiceAccountKeyResponse": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "description": "Creation time of the key",
            "format": "date-time",
            "type": "string"
          },
          "credentials": {
            "properties": {
              "aud": {
                "description": "Audience - service account API URL",
                "type": "string"
              },
              "iss": {
                "description": "Service account email",
                "format": "email",
                "type": "string"
              },
              "kid": {
                "description": "Key id to use",
                "type": "string"
              },
              "privateKey": {
                "description": "Private key. Only present, if the service account API was generating the key. Not recoverable later.",
                "type": "string"
              },
              "sub": {
                "description": "Service account id",
                "format": "uuid",
                "type": "string"
              }
            },
            "required": [
              "kid",
              "iss",
              "sub",
              "aud"
            ],
            "type": "object"
          },
          "id": {
            "description": "Unique ID of the key.",
            "format": "uuid",
            "type": "string"
          },
          "keyAlgorithm": {
            "enum": [
              "RSA_2048"
            ],
            "type": "string"
          },
          "keyOrigin": {
            "enum": [
              "USER_PROVIDED",
              "GENERATED"
            ],
            "type": "string"
          },
          "keyType": {
            "enum": [
              "USER_MANAGED",
              "SYSTEM_MANAGED"
            ],
            "type": "string"
          },
          "publicKey": {
            "description": "Public key, that was provider, or was generated by the service account API",
            "type": "string"
          },
          "validUntil": {
            "description": "If specified, the timestamp until the key is active. May be null",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "publicKey",
          "createdAt",
          "keyType",
          "keyOrigin",
          "keyAlgorithm",
          "active",
          "credentials"
        ],
        "title": "ServiceAccountKeyPrivateResponse",
        "type": "object"
      },
      "GetServiceAccountKeyResponse": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "description": "Creation time of the key",
            "format": "date-time",
            "type": "string"
          },
          "credentials": {
            "properties": {
              "aud": {
                "description": "Audience - service account API URL",
                "type": "string"
              },
              "iss": {
                "description": "Service account email",
                "format": "email",
                "type": "string"
              },
              "kid": {
                "description": "Key id to use",
                "type": "string"
              },
              "sub": {
                "description": "Service account id",
                "format": "uuid",
                "type": "string"
              }
            },
            "required": [
              "kid",
              "iss",
              "sub",
              "aud"
            ],
            "type": "object"
          },
          "id": {
            "description": "Unique ID of the key.",
            "format": "uuid",
            "type": "string"
          },
          "keyAlgorithm": {
            "enum": [
              "RSA_2048"
            ],
            "type": "string"
          },
          "keyOrigin": {
            "enum": [
              "USER_PROVIDED",
              "GENERATED"
            ],
            "type": "string"
          },
          "keyType": {
            "enum": [
              "USER_MANAGED",
              "SYSTEM_MANAGED"
            ],
            "type": "string"
          },
          "publicKey": {
            "description": "Public key, in the requested format",
            "type": "string"
          },
          "validUntil": {
            "description": "If specified, the timestamp until the key is active. May be null",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "createdAt",
          "keyType",
          "keyOrigin",
          "keyAlgorithm",
          "active",
          "credentials"
        ],
        "title": "ServiceAccountKeyResponseWithKey",
        "type": "object"
      },
      "ServiceAccount": {
        "properties": {
          "email": {
            "description": "Unique identifier of the service account in format of an email address generated by the service containing the prefix provided by the user during creation.",
            "example": "my-service-account-aBc2defg@sa.stackit.cloud",
            "format": "email",
            "type": "string"
          },
          "id": {
            "description": "Unique ID of the service account. It is also used in the 'sub' field of the service accounts access tokens.",
            "format": "uuid",
            "type": "string"
          },
          "internal": {
            "description": "Flag indicating internal service accounts",
            "type": "boolean"
          },
          "projectId": {
            "description": "ID of the related project",
            "type": "string"
          }
        },
        "required": [
          "id",
          "email",
          "projectId",
          "internal"
        ],
        "title": "ServiceAccount",
        "type": "object"
      },
      "CreateShortLivedAccessTokenPayload": {
        "properties": {
          "assertion": {
            "description": "The self signed JWT. Must be given when grant_type is urn:ietf:params:oauth:grant-type:jwt-bearer",
            "type": "string"
          },
          "grant_type": {
            "description": "Always use URL encoded values. E.g. urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer",
            "enum": [
              "urn:ietf:params:oauth:grant-type:jwt-bearer",
              "refresh_token"
            ],
            "type": "string"
          },
          "refresh_token": {
            "description": "Refresh token provided by a previous call with a self signed token. Must be given when grant_type is refresh_token",
            "type": "string"
          }
        },
        "required": [
          "grant_type"
        ],
        "title": "TokenRequestBody",
        "type": "object"
      },
      "CreateShortLivedAccessTokenResponse": {
        "properties": {
          "access_token": {
            "description": "The short lived token that can be used for API access",
            "type": "string"
          },
          "expires_in": {
            "example": 3600,
            "type": "integer"
          },
          "refresh_token": {
            "description": "Refresh token that can be used to request a new access token when it expires (and before refresh token expires). Tokens are rotated.",
            "type": "string"
          },
          "scope": {
            "description": "scope field of the self signed token",
            "type": "string"
          },
          "token_type": {
            "enum": [
              "Bearer"
            ],
            "type": "string"
          }
        },
        "required": [
          "access_token",
          "refresh_token",
          "scope",
          "token_type",
          "expires_in"
        ],
        "title": "TokenResponseBody",
        "type": "object"
      }
    }
  },
  "info": {
    "description": "API to manage Service Accounts and their Access Tokens.\n\n### System for Cross-domain Identity Management (SCIM)\nService Account Service offers SCIM APIs to query state. The SCIM protocol was created as standard for\n automating the exchange of user identity information between identity domains, or IT systems. Service accounts\n are be handled as indentites similar to SCIM users. A custom SCIM schema has been created: `/ServiceAccounts`\n\n#### Syntax\n##### Attribute operators\n| OPERATOR | DESCRIPTION              |\n|----------|--------------------------|\n| eq       | equal                    |\n| ne       | not equal                |\n| co       | contains                 |\n| sw       | starts with              |\n| ew       | ends with                |\n\n##### Logical operators\n| OPERATOR | DESCRIPTION              |\n|----------|--------------------------|\n| and      | logical \"and\"            |\n| or       | logical \"or\"             |\n\n##### Grouping operators\n| OPERATOR | DESCRIPTION              |\n|----------|--------------------------|\n| ()       | precending grouping      |\n\n##### Example\n```\nfilter=email eq \"my-service-account-aBc2defg@sa.stackit.cloud\"\nfilter=email ne \"my-service-account-aBc2defg@sa.stackit.cloud\"\nfilter=email co \"my-service-account\"\nfilter=name sw \"my\"\nfilter=name ew \"account\"\nfilter=email co \"my-service-account\" and name sw \"my\"\nfilter=email co \"my-service-account\" and (name sw \"my\" or name ew \"account\")\n```\n\n#### Sorting\n\n\u003e Sorting is optional\n\n| PARAMETER | DESCRIPTION                          |\n|-----------|--------------------------------------|\n| sortBy    | attribute response is ordered by     |\n| sortOrder | 'ASCENDING' (default) or 'DESCENDING'|\n\n#### Pagination\n\n| PARAMETER    | DESCRIPTION                                  |\n|--------------|----------------------------------------------|\n| startIndex   | index of first query result, default: 1      |\n| count        | maximum number of query results, default: 100|",
    "termsOfService": "https://stackit.de/en/imprint",
    "title": "Service Account API",
    "version": "2.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/token": {
      "post": {
        "description": "Request a short lived API access token with OAUTH2. Compatible with [Using JWTs as Authorization Grants](https://www.rfc-editor.org/rfc/rfc7523.html#section-2.1)\nYou can request a token with a self signed token, or with a refresh token.",
        "operationId": "CreateShortLivedAccessToken",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateShortLivedAccessTokenPayload"
              }
            }
          },
          "description": "Self signed token or refresh token"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateShortLivedAccessTokenResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Request short lived API access token (OAUTH2)."
      }
    },
    "/v2/projects/{projectId}/service-accounts": {
      "get": {
        "description": "List all Service Account resources in a project. Returns the service account resources, not the service accounts that has access to the project.",
        "operationId": "ListServiceAccounts",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListServiceAccountsResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid User Token"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "examples": {
                  "Forbidden Example": {
                    "value": {
                      "error": {
                        "code": 403,
                        "message": "The request could not be performed",
                        "status": "Forbidden"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            },
            "description": "Forbidden"
          }
        },
        "summary": "List all Service Accounts"
      },
      "parameters": [
        {
          "description": "The ID of the project.",
          "in": "path",
          "name": "projectId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create a new Service Account in a project. The service account only resides in the project, and initially has no roles or permissions on any resources. After creation, the service account can be assigned to this project, other projects in the parent organization or to the parent organization.",
        "operationId": "CreateServiceAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceAccountPayload"
              }
            }
          },
          "description": "Service account request"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAccount"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid User Token"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "examples": {
                  "ForbiddenExample": {
                    "$ref": "#/components/examples/forbiddenExample"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Quota exceeded or no access to project"
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "ConflictExample": {
                    "$ref": "#/components/examples/conflict"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Name not unique"
          }
        },
        "summary": "Create a new Service Account"
      }
    },
    "/v2/projects/{projectId}/service-accounts/{serviceAccountEmail}": {
      "delete": {
        "description": "Delete a Service Account.",
        "operationId": "DeleteServiceAccount",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid User Token"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "examples": {
                  "Forbidden Example": {
                    "value": {
                      "error": "Forbidden",
                      "message": "Some information about what caused the Error",
                      "path": "/v1/path/which/returned/error",
                      "status": 403,
                      "timeStamp": "2019-08-24T14:15:22Z"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Service Account does not belong to Project"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFound Example": {
                    "$ref": "#/components/examples/notfound"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Service Account Not Found"
          }
        },
        "summary": "Delete Service Account"
      },
      "parameters": [
        {
          "description": "The ID of the project.",
          "in": "path",
          "name": "projectId",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The email of the Service Account.",
          "in": "path",
          "name": "serviceAccountEmail",
          "required": true,
          "schema": {
            "format": "email",
            "type": "string"
          }
        }
      ]
    },
    "/v2/projects/{projectId}/service-accounts/{serviceAccountEmail}/access-tokens": {
      "get": {
        "description": "Get all Access Tokens of a Service Account. The token itself is not returned, only the metadata about the access tokens. Access tokens are listed until they are expired. Revoked tokens are returned until expired.",
        "operationId": "ListAccessTokens",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAccessTokensResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid User Token"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "examples": {
                  "Forbidden Example": {
                    "value": {
                      "error": "Forbidden",
                      "message": "Service Account does not belong to Project or no access to project",
                      "path": "/v1/path/which/returned/error",
                      "status": 403,
                      "timeStamp": "2019-08-24T14:15:22Z"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Service Account does not belong to Project or no access to project"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "Not Found Example": {
                    "$ref": "#/components/examples/notfound"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Service Account not found"
          }
        },
        "summary": "List Access Tokens of Service Account"
      },
      "parameters": [
        {
          "description": "The ID of the project.",
          "in": "path",
          "name": "projectId",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The email of the Service Account.",
          "in": "path",
          "name": "serviceAccountEmail",
          "required": true,
          "schema": {
            "format": "email",
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create an Access Token for a Service Account. The service token can be then used for API calls. Save the response token, as it is not recoverable later. Token metadata can be requested until the token is not expired. A token cannot be created using another token from the same service account. Consider using service account keys instead as a more secure and automation friendly solution.",
        "operationId": "CreateAccessToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccessTokenPayload"
              }
            }
          },
          "description": "Token request. Optional. If not specified the access token will be valid for 90days."
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid User Token"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "examples": {
                  "Forbidden Example": {
                    "value": {
                      "error": "Forbidden",
                      "message": "Service Account does not belong to Project or no access to project",
                      "path": "/v1/path/which/returned/error",
                      "status": 403,
                      "timeStamp": "2019-08-24T14:15:22Z"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Service Account does not belong to Project or no access to project"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFound Example": {
                    "$ref": "#/components/examples/notfound"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Service Account not found"
          }
        },
        "summary": "Create a new Access Token"
      }
    },
    "/v2/projects/{projectId}/service-accounts/{serviceAccountEmail}/access-tokens/{accessTokenId}": {
      "delete": {
        "description": "Revoke an Access Token. The access token is instantly revoked, any following calls with the token will be unauthorized. The token metadata is still stored until the expiration time.",
        "operationId": "DeleteAccessToken",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid User Token"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "examples": {
                  "Forbidden Example": {
                    "value": {
                      "error": "Forbidden",
                      "message": "Service Account does not belong to Project or Access Token does not belong to Service Account or no access to project",
                      "path": "/v1/path/which/returned/error",
                      "status": 403,
                      "timeStamp": "2019-08-24T14:15:22Z"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Service Account does not belong to Project or Access Token does not belong to Service Account or no access to project"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFound Example": {
                    "$ref": "#/components/examples/notfound"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Access Token not found"
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "Conflict Example": {
                    "$ref": "#/components/examples/conflict"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Access Token already revoked"
          }
        },
        "summary": "Revoke Access Token"
      },
      "parameters": [
        {
          "description": "The ID of the project.",
          "in": "path",
          "name": "projectId",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the Service Account.",
          "in": "path",
          "name": "serviceAccountEmail",
          "required": true,
          "schema": {
            "format": "email",
            "type": "string"
          }
        },
        {
          "description": "The ID of the Access Token.",
          "in": "path",
          "name": "accessTokenId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ]
    },
    "/v2/projects/{projectId}/service-accounts/{serviceAccountEmail}/keys": {
      "get": {
        "description": "List all keys that belong to the service account",
        "operationId": "ListServiceAccountKeys",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListServiceAccountKeysResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid User Token"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "examples": {
                  "Forbidden Example": {
                    "value": {
                      "error": {
                        "code": 403,
                        "message": "The request could not be performed",
                        "status": "Forbidden"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            },
            "description": "Forbidden"
          }
        },
        "summary": "List all keys that belong to the service account"
      },
      "parameters": [
        {
          "description": "The ID of the project.",
          "in": "path",
          "name": "projectId",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The email of the service account.",
          "in": "path",
          "name": "serviceAccountEmail",
          "required": true,
          "schema": {
            "format": "email",
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create a new key to the service account. You can generate an RSA keypair, and post the PUBLIC part of the keypair, or leave empty, then the service will generate a pair. Maximum of 10 key can be added. A new key cannot be created using the same service account (authenticated using the short lived token of another key of the same service account).",
        "operationId": "CreateServiceAccountKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceAccountKeyPayload"
              }
            }
          },
          "description": "Service account request"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateServiceAccountKeyResponse"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid User Token"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "examples": {
                  "ForbiddenExample": {
                    "$ref": "#/components/examples/forbiddenExample"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Quota exceeded or no access to project"
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "ConflictExample": {
                    "$ref": "#/components/examples/conflict"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Name not unique"
          }
        },
        "summary": "Create a new Service Account key"
      }
    },
    "/v2/projects/{projectId}/service-accounts/{serviceAccountEmail}/keys/{keyId}": {
      "delete": {
        "description": "Delete a key",
        "operationId": "DeleteServiceAccountKey",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid User Token"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "examples": {
                  "Forbidden Example": {
                    "value": {
                      "error": {
                        "code": 403,
                        "message": "The request could not be performed",
                        "status": "Forbidden"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            },
            "description": "Forbidden"
          }
        },
        "summary": "Delete a service account key"
      },
      "get": {
        "description": "Get key details",
        "operationId": "GetServiceAccountKey",
        "parameters": [
          {
            "description": "Requested format for the public key",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "X509_PEM",
              "enum": [
                "X509_PEM"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetServiceAccountKeyResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid User Token"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "examples": {
                  "Forbidden Example": {
                    "value": {
                      "error": {
                        "code": 403,
                        "message": "The request could not be performed",
                        "status": "Forbidden"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            },
            "description": "Forbidden"
          }
        },
        "summary": "Get service account key details"
      },
      "parameters": [
        {
          "description": "The ID of the project.",
          "in": "path",
          "name": "projectId",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The email of the service account.",
          "in": "path",
          "name": "serviceAccountEmail",
          "required": true,
          "schema": {
            "format": "email",
            "type": "string"
          }
        },
        {
          "description": "ID of the key.",
          "in": "path",
          "name": "keyId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update a key. You can activate or deactivate a key, or set/delete validUntil. The key cannot be updated using the same service account (authenticated using the short lived token of the key).",
        "operationId": "PartialUpdateServiceAccountKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialUpdateServiceAccountKeyPayload"
              }
            }
          },
          "description": "Service account request"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartialUpdateServiceAccountKeyResponse"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid User Token"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "examples": {
                  "ForbiddenExample": {
                    "$ref": "#/components/examples/forbiddenExample"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Quota exceeded or no access to project"
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "ConflictExample": {
                    "$ref": "#/components/examples/conflict"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Name not unique"
          }
        },
        "summary": "Update Service Account key"
      }
    },
    "/v2/service-accounts/public/jwk/{serviceAccountEmail}": {
      "get": {
        "description": "Get JSON Web Key set of the service account",
        "operationId": "GetJWKS",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JWKS"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get JSON Web Key set of the service account"
      },
      "parameters": [
        {
          "description": "The email of the service account.",
          "in": "path",
          "name": "serviceAccountEmail",
          "required": true,
          "schema": {
            "format": "email",
            "type": "string"
          }
        }
      ]
    }
  },
  "servers": [
    {
      "url": "https://service-account.api.{region}stackit.cloud",
      "variables": {
        "region": {
          "default": ""
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Public"
    },
    {
      "name": "v2"
    },
    {
      "name": "Private"
    }
  ]
}